{"version":"NotebookV1","origId":2681151230257408,"name":"06 Pipeline Demo","language":"python","commands":[{"version":"CommandV1","origId":2681151230257409,"guid":"ddc7610d-cbb7-4bd8-ba5f-0d8eb753435b","subtype":"command","commandType":"auto","position":1.0,"command":"%md-sandbox\n<div style=\"text-align: center; line-height: 0; padding-top: 9px;\">\n  <img src=\"https://databricks.com/wp-content/uploads/2018/03/db-academy-rgb-1200px.png\" alt=\"Databricks Learning\" style=\"width: 600px; height: 163px\">\n</div>","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"92f55562-d753-4334-bcf5-70c12671449c"},{"version":"CommandV1","origId":2681151230257410,"guid":"11010afd-9cdc-42e4-883f-10ba84824a52","subtype":"command","commandType":"auto","position":2.0,"command":"%md-sandbox\n# Machine Learning Pipeline\n\n** What you will learn:**\n* How to create a Machine Learning Pipeline.\n* How to train a Machine Learning model.\n* How to save & read the model.\n* How to make predictions with the model.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"8d9e264e-35f0-4788-b100-b4360a3a61f5"},{"version":"CommandV1","origId":2681151230257411,"guid":"1f27d85d-5682-45c0-bf56-6e472f793b51","subtype":"command","commandType":"auto","position":3.0,"command":"%md\n##![Spark Logo Tiny](https://files.training.databricks.com/images/105/logo_spark_tiny.png) Getting Started\n\nRun the following cell to configure our \"classroom.\"","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"06570822-0135-44d3-b40b-52891675b61f"},{"version":"CommandV1","origId":2681151230257412,"guid":"f58a1cd3-63eb-48bb-b631-d97d318f3381","subtype":"command","commandType":"auto","position":4.0,"command":"%run \"../../Includes/Classroom Setup\"","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"0a28eb04-fe89-4d5e-924a-644ed2103750"},{"version":"CommandV1","origId":2681151230257413,"guid":"9375b147-e9bf-4789-9266-6f12c8fe1730","subtype":"command","commandType":"auto","position":5.0,"command":"%md\n## The Data\n\nThe dataset contains bike rental info from 2011 and 2012 in the Capital bikeshare system, plus additional relevant information such as weather.  \n\nThis dataset is from Fanaee-T and Gama (2013) and is hosted by the <a href=\"http://archive.ics.uci.edu/ml/datasets/Bike+Sharing+Dataset\" target=\"_blank\">UCI Machine Learning Repository</a>.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"45404090-70c2-4fea-ae2c-2bbe2abd892f"},{"version":"CommandV1","origId":2681151230257414,"guid":"3fb2c6ad-8a95-4bc5-b8b6-9d06127caec7","subtype":"command","commandType":"auto","position":6.0,"command":"%md\n## The Goal\nWe want to learn to predict bike rental counts (per hour) from information such as day of the week, weather, month, etc.  \n\nHaving good predictions of customer demand allows a business or service to prepare and increase supply as needed.  ","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"0d05aa4c-3df6-4889-adbc-66e90d166092"},{"version":"CommandV1","origId":2681151230257415,"guid":"c79d0b6a-24ed-42b0-9290-8a87c8bb429b","subtype":"command","commandType":"auto","position":7.0,"command":"%md\n## Loading the data\n\nWe begin by loading our data, which is stored in the CSV format</a>.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"13448051-1fcc-4569-b5d8-5a547b8a38ae"},{"version":"CommandV1","origId":2681151230257416,"guid":"bc8003f2-e08d-4cb7-91dd-ef114876ad77","subtype":"command","commandType":"auto","position":8.0,"command":"fileName = \"/mnt/training/bikeSharing/data-001/hour.csv\"\n\ninitialDF = (spark.read          # Our DataFrameReader\n  .option(\"header\", \"true\")      # Let Spark know we have a header\n  .option(\"inferSchema\", \"true\") # Infering the schema (it is a small dataset)\n  .csv(fileName)                 # Location of our data\n  .cache()                       # Mark the DataFrame as cached.\n)\n\ninitialDF.count()                # Materialize the cache\n\ninitialDF.printSchema()","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"c72fa523-8c44-44df-8cf9-c34f72473a4f"},{"version":"CommandV1","origId":2681151230257417,"guid":"2982a38f-c286-4e32-88b6-4ca6da3a6212","subtype":"command","commandType":"auto","position":9.0,"command":"%md\n## Understanding the data\n\nAccording to the <a href=\"http://archive.ics.uci.edu/ml/datasets/Bike+Sharing+Dataset\" target=\"_blank\">UCI ML Repository description</a>, we have the following schema:\n\n**Feature columns**:\n* **dteday**: date\n* **season**: season (1:spring, 2:summer, 3:fall, 4:winter)\n* **yr**: year (0:2011, 1:2012)\n* **mnth**: month (1 to 12)\n* **hr**: hour (0 to 23)\n* **holiday**: whether the day was a holiday or not\n* **weekday**: day of the week\n* **workingday**: `1` if the day is neither a weekend nor holiday, otherwise `0`.\n* **weathersit**: \n  * 1: Clear, Few clouds, Partly cloudy, Partly cloudy\n  * 2: Mist + Cloudy, Mist + Broken clouds, Mist + Few clouds, Mist\n  * 3: Light Snow, Light Rain + Thunderstorm + Scattered clouds, Light Rain + Scattered clouds\n  * 4: Heavy Rain + Ice Pallets + Thunderstorm + Mist, Snow + Fog\n* **temp**: Normalized temperature in Celsius. The values are derived via `(t-t_min)/(t_max-t_min)`, `t_min=-8`, `t_max=+39` (only in hourly scale)\n* **atemp**: Normalized feeling temperature in Celsius. The values are derived via `(t-t_min)/(t_max-t_min)`, `t_min=-16`, `t_max=+50` (only in hourly scale)\n* **hum**: Normalized humidity. The values are divided to 100 (max)\n* **windspeed**: Normalized wind speed. The values are divided to 67 (max)\n\n**Label columns**:\n* **casual**: count of casual users\n* **registered**: count of registered users\n* **cnt**: count of total rental bikes including both casual and registered\n\n**Extraneous columns**:\n* **instant**: record index\n\nFor example, the first row is a record of hour 0 on January 1, 2011---and apparently, 16 people rented bikes around midnight!","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"2889ee1e-847d-4c41-ad61-ab2242b210df"},{"version":"CommandV1","origId":2681151230257418,"guid":"f967beaf-09d7-41e6-a3ae-edd4471626e5","subtype":"command","commandType":"auto","position":10.0,"command":"%md\n## Preprocessing the data\n\nSo what do we need to do to get our data ready for Machine Learning?\n\n**Recall our goal**: We want to learn to predict the count of bike rentals (the `cnt` column).  We refer to the count as our target \"label\".\n\n**Features**: What can we use as features to predict the `cnt` label?  \n\nAll the columns except `cnt`, and a few exceptions:\n* `casual` & `registered`\n  * The `cnt` column we want to predict equals the sum of the `casual` + `registered` columns.  We will remove the `casual` and `registered` columns from the data to make sure we do not use them to predict `cnt`.  (*Warning: This is a danger in careless Machine Learning.  Make sure you do not \"cheat\" by using information you will not have when making predictions*)\n* `season` and the date column `dteday`: We could keep them, but they are well-represented by the other date-related columns like `yr`, `mnth`, and `weekday`.\n* `holiday` and `weekday`: These features are highly correlated with the `workingday` column.\n* row index column `instant`: This is a useless column to us.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"87b6804e-67dc-4cdc-ba93-e44704f45766"},{"version":"CommandV1","origId":2681151230257419,"guid":"93c7d7ca-9640-4142-a0ce-6a86b2dd5e2d","subtype":"command","commandType":"auto","position":11.0,"command":"%md\nLet's drop the columns `instant`, `dteday`, `season`, `casual`, `holiday`, `weekday`, and `registered` from our DataFrame and then review our schema:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"b8092802-4687-43c1-a61f-382dee8f50c4"},{"version":"CommandV1","origId":2681151230257420,"guid":"060a5e85-dc10-4d6e-a6f5-068c7ceee218","subtype":"command","commandType":"auto","position":12.0,"command":"preprocessedDF = initialDF.drop(\"instant\", \"dteday\", \"season\", \"casual\", \"registered\", \"holiday\", \"weekday\")\n\npreprocessedDF.printSchema()","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"3c630f15-977a-4e2a-a9a5-6ca152ec280d"},{"version":"CommandV1","origId":2681151230257421,"guid":"af4a8c3e-8a70-4a64-81a6-7e29ae576620","subtype":"command","commandType":"auto","position":13.0,"command":"%md\n##![Spark Logo Tiny](https://files.training.databricks.com/images/105/logo_spark_tiny.png) Train/Test Split\n\nOur final data preparation step will be to split our dataset into separate training and test sets.\n\nUsing the `randomSplit()` function, we split the data such that 70% of the data is reserved for training and the remaining 30% for testing. \n\nFor more information see:\n* Scala: <a href=\"https://spark.apache.org/docs/latest/api/scala/#org.apache.spark.sql.Dataset\" target=\"_blank\">Dataset.randomSplit()</a>\n* Python: <a href=\"https://spark.apache.org/docs/latest/api/python/pyspark.sql.html#pyspark.sql.DataFrame.randomSplit\" target=\"_blank\">DataFrame.randomSplit()</a>","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"3c40a178-270b-4bf6-a927-d5d85ff28ed0"},{"version":"CommandV1","origId":2681151230257422,"guid":"166fc472-1f5a-474c-a1e9-e2c68c4318db","subtype":"command","commandType":"auto","position":14.0,"command":"trainDF, testDF = preprocessedDF.randomSplit(\n  [0.7, 0.3],  # 70-30 split\n  seed=42)     # For reproducibility\n\nprint(\"We have %d training examples and %d test examples.\" % (trainDF.count(), testDF.count()))\nassert (trainDF.count() == 12197)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"93015947-a1da-4123-8953-919757e5f3d6"},{"version":"CommandV1","origId":2681151230257423,"guid":"4dcd2e09-ba1f-408e-a183-deadb02d70cc","subtype":"command","commandType":"auto","position":15.0,"command":"%md\n## Visualize our data\n\nNow that we have preprocessed our features, we can quickly visualize our data to get a sense of whether the features are meaningful.\n\nWe want to compare bike rental counts versus the hour of the day. \n\nTo plot the data:\n* Run the cell below\n* From the list of plot types, select **Line**.\n* Click the **Plot Options...** button.\n* By dragging and dropping the fields, set the **Keys** to **hr** and the **Values** to **cnt**.\n\nOnce you've created the graph, go back and select different **Keys**. For example:\n* **cnt** vs. **windspeed**\n* **cnt** vs. **month**\n* **cnt** vs. **workingday**\n* **cnt** vs. **hum**\n* **cnt** vs. **temp**\n* ...etc.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"c2d1462f-a4d8-4f15-9e24-90cc6c95263a"},{"version":"CommandV1","origId":2681151230257424,"guid":"69d2a7cc-2463-4367-9de1-ac273e2ce19a","subtype":"command","commandType":"auto","position":16.0,"command":"display(trainDF)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"9ad87106-f497-4110-b64d-0b15a2b2012f"},{"version":"CommandV1","origId":2681151230257425,"guid":"39e7ad2a-766d-42db-ab25-a3c2c7d13446","subtype":"command","commandType":"auto","position":17.0,"command":"%md\nA couple of notes:\n* Rentals are low during the night, and they peak in the morning (8 am) and in the early evening (5 pm).  \n* Rentals are high during the summer and low in winter.\n* Rentals are high on working days vs. non-working days\n\nThis indicates that the `hr`, `mnth` and `workingday` features are all useful and can help us predict our label `cnt`. \n\nBut how do other features affect our prediction? \n\nDo combinations of those features matter? For example, high wind in summer is not going to have the same effect as high wind in winter.\n\nAs it turns out our features can be divided into two types:\n * **Numeric columns:**\n   * `mnth`\n   * `temp`\n   * `hr`\n   * `hum`\n   * `atemp`\n   * `windspeed`\n\n* **Categorical Columns:**\n  * `yr`\n  * `workingday`\n  * `weathersit`\n  \nWe could treat both `mnth` and `hr` as categorical but we would lose the temporal relationships (e.g. 2:00 AM comes before 3:00 AM).","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"a4c80bf0-7a3a-46a9-a383-72c89616382f"},{"version":"CommandV1","origId":2681151230257426,"guid":"82b90874-715a-428d-9c3e-c05f1262fc8a","subtype":"command","commandType":"auto","position":18.0,"command":"%md\n##![Spark Logo Tiny](https://files.training.databricks.com/images/105/logo_spark_tiny.png) StringIndexer\n\nFor each of the categorical columns, we are going to create one `StringIndexer` where we\n  * Set `inputCol` to something like `weathersit`\n  * Set `outputCol` to something like `weathersitIndex`\n\nThis will have the effect of treating a value like `weathersit` not as number 1 through 4, but rather four categories: **light**, **mist**, **medium** & **heavy**, for example.\n\nFor more information see:\n* Scala: <a href=\"https://spark.apache.org/docs/latest/api/scala/index.html#org.apache.spark.ml.feature.StringIndexer\" target=\"_blank\">StringIndexer</a>\n* Python: <a href=\"https://spark.apache.org/docs/latest/api/python/pyspark.ml.html?highlight=stringindexer#pyspark.ml.feature.StringIndexer\" target=\"_blank\">StringIndexer</a>","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"e337411e-2d24-4b01-b6c6-8dba59c7281d"},{"version":"CommandV1","origId":2681151230257427,"guid":"7dca2d96-bc82-45ee-b683-aa41f6309ee7","subtype":"command","commandType":"auto","position":19.0,"command":"%md\nBefore we get started, let's review our current schema:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"0a89a381-324e-4d83-8c98-8881bdb78c7a"},{"version":"CommandV1","origId":2681151230257428,"guid":"a062bec8-7361-42fc-8655-b604a78d3045","subtype":"command","commandType":"auto","position":20.0,"command":"trainDF.printSchema()","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"f5185d33-37a1-4d89-9215-6b3cff3e3340"},{"version":"CommandV1","origId":2681151230257429,"guid":"8139afca-fcc4-4577-b212-6ed80027fe67","subtype":"command","commandType":"auto","position":21.0,"command":"%md\nLet's create the first `StringIndexer` for the `workingday` column.\n\nAfter we create it, we can run a sample through the indexer to see how it would affect our `DataFrame`.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"1ae2ab37-11c2-49a8-b182-4bc6737f8741"},{"version":"CommandV1","origId":2681151230257430,"guid":"beea380f-611f-4208-81e6-8b9cd251662e","subtype":"command","commandType":"auto","position":22.0,"command":"from pyspark.ml.feature import StringIndexer\n\nworkingdayStringIndexer = StringIndexer(\n  inputCol=\"workingday\", \n  outputCol=\"workingdayIndex\")\n\n# Just for demonstration purposes, we will use the StringIndexer to fit and\n# then transform our training data set just to see how it affects the schema\nworkingdayStringIndexer.fit(trainDF).transform(trainDF).printSchema()","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"0984d957-4051-44dc-b62e-9175456aca6f"},{"version":"CommandV1","origId":2681151230257431,"guid":"8d2e453e-3fe6-4408-9c1f-2f7662019e1a","subtype":"command","commandType":"auto","position":23.0,"command":"%md\nNext we will create the `StringIndexer` for the `yr` column and preview its effect.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"764c57f8-1944-4804-b6b2-1e8ae9501517"},{"version":"CommandV1","origId":2681151230257432,"guid":"f2ced8ea-5136-4b48-b3f5-189c01be7f0b","subtype":"command","commandType":"auto","position":24.0,"command":"yrStringIndexer = StringIndexer(\n  inputCol=\"yr\", \n  outputCol=\"yrIndex\")\n\nyrStringIndexer.fit(trainDF).transform(trainDF).printSchema()","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"d84f1078-7b63-4b02-81f3-93dfdd30e6cd"},{"version":"CommandV1","origId":2681151230257433,"guid":"4b23aed8-d9d6-4ae8-97d4-d43319bf38de","subtype":"command","commandType":"auto","position":25.0,"command":"%md\nAnd then create our last `StringIndexer` for the `weathersit` column.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"52caa5e5-d2e4-4c1e-99b7-1528917f1dfa"},{"version":"CommandV1","origId":2681151230257434,"guid":"fb049cfc-7aaf-4b54-af9f-71949b16976d","subtype":"command","commandType":"auto","position":26.0,"command":"weathersitStringIndexer = StringIndexer(\n  inputCol=\"weathersit\", \n  outputCol=\"weathersitIndex\")\n\nweathersitStringIndexer.fit(trainDF).transform(trainDF).printSchema()","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"42f938ae-de10-4057-8f42-e65043929621"},{"version":"CommandV1","origId":2681151230257435,"guid":"9344df79-2e93-4f5d-bf51-0c920ab505e3","subtype":"command","commandType":"auto","position":27.0,"command":"%md\n##![Spark Logo Tiny](https://files.training.databricks.com/images/105/logo_spark_tiny.png) VectorAssembler\n\nThe next step is to assemble the feature columns into a single feature vector.\n\nTo do that we will use the `VectorAssembler` where we\n  * Set `inputCols` to the new list of feature columns\n  * Set `outputCol` to `features`\n  \n  \nFor more information see:\n* Scala: <a href=\"https://spark.apache.org/docs/latest/api/scala/#org.apache.spark.ml.feature.VectorAssembler\" target=\"_blank\">VectorAssembler</a>\n* Python: <a href=\"https://spark.apache.org/docs/latest/api/python/pyspark.ml.html#pyspark.ml.feature.VectorAssembler\" target=\"_blank\">VectorAssembler</a>","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"54449073-2abd-43a1-8002-003a184b406f"},{"version":"CommandV1","origId":2681151230257436,"guid":"2cbcf50c-908d-4406-9cd0-163943fe3cf3","subtype":"command","commandType":"auto","position":28.0,"command":"from pyspark.ml.feature import VectorAssembler\n\nassemblerInputs  = [\n  \"mnth\", \"temp\", \"hr\", \"hum\", \"atemp\", \"windspeed\", # Our numerical features\n  \"yrIndex\", \"workingdayIndex\", \"weathersit\"]        # Our new categorical features\n\nvectorAssembler = VectorAssembler(\n  inputCols=assemblerInputs, \n  outputCol=\"features\")","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"bddae4e8-ad96-40e2-960c-20c0774ee3b5"},{"version":"CommandV1","origId":2681151230257437,"guid":"e9b242b5-8d22-4fc2-a494-4e54f7f1151b","subtype":"command","commandType":"auto","position":29.0,"command":"%md\n##![Spark Logo Tiny](https://files.training.databricks.com/images/105/logo_spark_tiny.png) Random Forests\n\nRandom forests and ensembles of decision trees are more powerful than a single decision tree alone.\n\nThis is also the last step in our pipeline.\n\nWe will use the `RandomForestRegressor` where we\n  * Set `labelCol` to the column that contains our label.\n  * Set `seed` to ensure reproducibility.\n  * Set `numTrees` to `3` so that we build 3 trees in our random forest.\n  * Set `maxDepth` to `10` to control the depth/complexity of the tree.\n\nFor more information see:\n* Scala: <a href=\"https://spark.apache.org/docs/latest/api/scala/index.html#org.apache.spark.ml.regression.RandomForestRegressor\" target=\"_blank\">RandomForestRegressor</a>\n* Python: <a href=\"https://spark.apache.org/docs/latest/api/python/pyspark.ml.html#pyspark.ml.regression.RandomForestRegressor\" target=\"_blank\">RandomForestRegressor</a>","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"ddfcbbe5-fcdd-42f5-8267-81826d85dbe1"},{"version":"CommandV1","origId":2681151230257438,"guid":"ccd05cef-4529-4ae3-95c8-cefa6a8731fc","subtype":"command","commandType":"auto","position":30.0,"command":"from pyspark.ml.regression import RandomForestRegressor\n\nrfr = (RandomForestRegressor()\n      .setLabelCol(\"cnt\") # The column of our label\n      .setSeed(27)        # Some seed value for consistency\n      .setNumTrees(3)     # A guess at the number of trees\n      .setMaxDepth(10)    # A guess at the depth of each tree\n)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"353a36a9-a40b-4b60-817e-f6d1b3224246"},{"version":"CommandV1","origId":2681151230257439,"guid":"a63fe3a0-9d20-432d-9f34-e74d4c3b634e","subtype":"command","commandType":"auto","position":31.0,"command":"%md\n##![Spark Logo Tiny](https://files.training.databricks.com/images/105/logo_spark_tiny.png) Create a Machine Learning Pipeline\n\nNow let's wrap all of these stages into a Pipeline.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"ded5bf90-81a7-4a4b-af8c-8be2e3e075a2"},{"version":"CommandV1","origId":2681151230257440,"guid":"83fbe436-ce93-464b-a4f0-b36af31061a3","subtype":"command","commandType":"auto","position":32.0,"command":"from pyspark.ml import Pipeline\n\npipeline = Pipeline().setStages([\n  workingdayStringIndexer, # categorize workingday\n  weathersitStringIndexer, # categorize weathersit\n  yrStringIndexer,         # categorize yr\n  vectorAssembler,         # assemble the feature vector for all columns\n  rfr])","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"43636e2e-c515-49d2-bd5a-38b7fd4daa2f"},{"version":"CommandV1","origId":2681151230257441,"guid":"222c06e1-5358-461c-a86f-37486c8591fb","subtype":"command","commandType":"auto","position":33.0,"command":"%md\n##![Spark Logo Tiny](https://files.training.databricks.com/images/105/logo_spark_tiny.png) Train the model\n\nTrain the pipeline model to run all the steps in the pipeline.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"a08ffd32-8e31-450e-8153-486b455d6af8"},{"version":"CommandV1","origId":2681151230257442,"guid":"b9f127e6-f8e6-4d93-9af5-e012e43193f6","subtype":"command","commandType":"auto","position":34.0,"command":"pipelineModel = pipeline.fit(trainDF)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"135934f3-0369-48b4-83b1-2d89231bd992"},{"version":"CommandV1","origId":2681151230257443,"guid":"bbb3e3d9-69e4-45f5-8463-6f110fdcee9a","subtype":"command","commandType":"auto","position":35.0,"command":"%md\n##![Spark Logo Tiny](https://files.training.databricks.com/images/105/logo_spark_tiny.png) Evaluate the model\n\nNow that we have fitted a model, we can evaluate it.\n\nIn the case of a random forest, one of the best things to look at is the `featureImportances`:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"e8da35cc-7110-4c60-a3b4-5879c61d55e6"},{"version":"CommandV1","origId":2681151230257444,"guid":"bb7a1e85-b7d9-4986-8c08-2e5b273cc60e","subtype":"command","commandType":"auto","position":36.0,"command":"from pyspark.ml.regression import RandomForestRegressionModel\n\nrfrm = pipelineModel.stages[-1] # The RFRM is in the last stage of the model\n\n#  Zip the list of features with their scores\nscores = zip(assemblerInputs, rfrm.featureImportances)\n\n# And pretty print 'em\nfor x in scores: print(\"%-15s = %s\" % x)\n\nprint(\"-\"*80)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"348b4372-28c0-4f72-a9e0-7c6c9e7618ab"},{"version":"CommandV1","origId":2681151230257445,"guid":"59fa6a05-923c-498e-9ff9-ef9031b0bc92","subtype":"command","commandType":"auto","position":37.0,"command":"%md\nWhich features were most important?","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"842e4af1-27a3-4101-a207-5eb6a7ebb598"},{"version":"CommandV1","origId":2681151230257446,"guid":"ad9a98af-13a9-45a7-b2f3-fdc8d7f80f44","subtype":"command","commandType":"auto","position":38.0,"command":"%md\n##![Spark Logo Tiny](https://files.training.databricks.com/images/105/logo_spark_tiny.png) Making Predictions\n\nNext, apply the trained pipeline model to the test set.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"d81aeab5-3a43-468c-aa6c-d1d07129810b"},{"version":"CommandV1","origId":2681151230257447,"guid":"2fda13e1-c48a-4467-aab6-4fa424fed475","subtype":"command","commandType":"auto","position":39.0,"command":"# Using the model, create our predictions from the test data\npredictionsDF = pipelineModel.transform(testDF)\n\n# Reorder the columns for easier interpretation\nreorderedDF = predictionsDF.select(\"cnt\", \"prediction\", \"yr\", \"yrIndex\", \"mnth\", \"hr\", \"workingday\", \"workingdayIndex\", \"weathersit\", \"weathersitIndex\", \"temp\", \"atemp\", \"hum\", \"windspeed\")\n\ndisplay(reorderedDF)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"4e8ceddc-59e6-44ae-af10-75e191f0ab02"},{"version":"CommandV1","origId":2681151230257448,"guid":"abb12b05-783c-4bc2-a443-e6d345015818","subtype":"command","commandType":"auto","position":40.0,"command":"%md\n##![Spark Logo Tiny](https://files.training.databricks.com/images/105/logo_spark_tiny.png) Evaluate\n\nNext, we'll use `RegressionEvaluator` to assess the results. The default regression metric is RMSE.\n\nFor more information see:\n* Scala: <a href=\"https://spark.apache.org/docs/latest/api/scala/#org.apache.spark.ml.evaluation.RegressionEvaluator\" target=\"_blank\">RegressionEvaluator</a>\n* Python: <a href=\"https://spark.apache.org/docs/latest/api/python/pyspark.ml.html#pyspark.ml.evaluation.RegressionEvaluator\" target=\"_blank\">RegressionEvaluator</a>","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"90c624d3-b75b-45ce-a759-2ac911f12d69"},{"version":"CommandV1","origId":2681151230257449,"guid":"f128176c-84e6-4ec3-89de-a25d2c9b7bd4","subtype":"command","commandType":"auto","position":41.0,"command":"from pyspark.ml.evaluation import RegressionEvaluator\n\nevaluator = RegressionEvaluator().setLabelCol(\"cnt\")\n\nrmse = evaluator.evaluate(predictionsDF)\n\nprint(\"Test RMSE = %f\" % rmse)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"ca3515cb-2ae0-46fd-a59a-4821eb76b5fd"},{"version":"CommandV1","origId":2681151230257450,"guid":"b7dc55b6-34a6-402a-a6a7-9461df180a49","subtype":"command","commandType":"auto","position":42.0,"command":"%md\n##![Spark Logo Tiny](https://files.training.databricks.com/images/105/logo_spark_tiny.png) ParamGrid\n\nThere are a lot of hyperparamaters we could tune, and it would take a long time to manually configure.\n\nInstead of a manual (ad-hoc) approach, let's use Spark's `ParamGridBuilder` to find the optimal hyperparameters in a more systematic approach.\n\nIn this example notebook, we keep these trees shallow and use a relatively small number of trees. Let's define a grid of hyperparameters to test:\n  - maxDepth: max depth of each decision tree in the RF ensemble (Use the values `2, 5, 10`)\n  - numTrees: number of trees in each RF ensemble (Use the values `10, 50`)\n\n`addGrid()` accepts the name of the parameter (e.g. `rf.maxDepth`), and an Array of the possible values (e.g. `Array(2, 5, 10)`).\n\nFor more information see:\n* Scala: <a href=\"https://spark.apache.org/docs/latest/api/scala/#org.apache.spark.ml.tuning.ParamGridBuilder\" target=\"_blank\">ParamGridBuilder</a>\n* Python: <a href=\"https://spark.apache.org/docs/latest/api/python/pyspark.ml.html#pyspark.ml.tuning.ParamGridBuilder\" target=\"_blank\">ParamGridBuilder</a>","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"d1ab33a3-c091-47f7-a3ce-a3e321778f52"},{"version":"CommandV1","origId":2681151230257451,"guid":"64064e08-06b5-49af-bf78-9ac6fce58307","subtype":"command","commandType":"auto","position":43.0,"command":"from pyspark.ml.tuning import ParamGridBuilder\n\nparamGrid = (ParamGridBuilder()\n            .addGrid(rfr.maxDepth, [2, 5, 10])\n            .addGrid(rfr.numTrees, [10, 50])\n            .build())","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"5c38f253-70c2-4d75-86aa-ef4089cb8855"},{"version":"CommandV1","origId":2681151230257452,"guid":"b824d935-fa3d-4842-8179-49f9b2eca119","subtype":"command","commandType":"auto","position":44.0,"command":"%md\n##![Spark Logo Tiny](https://files.training.databricks.com/images/105/logo_spark_tiny.png) Cross-Validation\n\nWe are also going to use 3-fold cross-validation to identify the optimal maxDepth and numTrees combination.\n\n![crossValidation](https://files.training.databricks.com/images/301/CrossValidation.png)\n\nWith 3-fold cross-validation, we train on 2/3 of the data and evaluate with the remaining (held-out) 1/3. We repeat this process 3 times, so each fold gets the chance to act as the validation set. We then average the results of the three rounds.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"465c5404-bcdb-4e97-8af2-400abb15583d"},{"version":"CommandV1","origId":2681151230257453,"guid":"5164d0c8-c5ca-4a6f-9735-1cf607aa8b1c","subtype":"command","commandType":"auto","position":45.0,"command":"%md\n\nWe pass in the `estimator` (our original pipeline), an `evaluator`, and an `estimatorParamMaps` to the `CrossValidator` so that it knows:\n- Which model to use\n- How to evaluate the model\n- What hyperparamters to set on the model\n\nWe can also set the number of folds we want to split our data into (3), as well as setting a seed so we all have the same split in the data.\n\nFor more information see:\n* Scala: <a href=\"https://spark.apache.org/docs/latest/api/scala/#org.apache.spark.ml.tuning.CrossValidator\" target=\"_blank\">CrossValidator</a>\n* Python: <a href=\"https://spark.apache.org/docs/latest/api/python/pyspark.ml.html#pyspark.ml.tuning.CrossValidator\" target=\"_blank\">CrossValidator</a>","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"8d652bc5-bff4-431d-b461-f4c687a497ed"},{"version":"CommandV1","origId":2681151230257454,"guid":"46dc33eb-8161-4ddf-9edf-a6afc95bec9c","subtype":"command","commandType":"auto","position":46.0,"command":"from pyspark.ml.tuning import CrossValidator\nfrom pyspark.ml.evaluation import RegressionEvaluator\n\nevaluator = (RegressionEvaluator()\n  .setLabelCol(\"cnt\")\n  .setPredictionCol(\"prediction\"))\n\ncv = (CrossValidator()\n  .setEstimator(pipeline)\n  .setEvaluator(evaluator)\n  .setEstimatorParamMaps(paramGrid)\n  .setNumFolds(3)\n  .setSeed(27))","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"1ea8643e-7538-4e2f-ad6e-23ceb3d1282f"},{"version":"CommandV1","origId":2681151230257455,"guid":"d5d86452-b7e9-4abd-80d0-26508acf9aba","subtype":"command","commandType":"auto","position":47.0,"command":"%md\n##![Spark Logo Tiny](https://files.training.databricks.com/images/105/logo_spark_tiny.png) A New Model\n\nWe can now use the `CrossValidator` to fit a new model - this could take several minutes on a small cluster.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"9d2a9c2e-0afe-4dbd-b856-72f6e1ef7007"},{"version":"CommandV1","origId":2681151230257456,"guid":"aa55261c-04c3-4bb1-a8c9-171f660ba4cb","subtype":"command","commandType":"auto","position":48.0,"command":"cvModel = cv.fit(trainDF)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"035cd01f-cb81-49ef-8d6d-0c35ab519100"},{"version":"CommandV1","origId":2681151230257457,"guid":"f38dcb5f-475e-4349-bf50-bb956125808a","subtype":"command","commandType":"auto","position":49.0,"command":"%md\nAnd now we can take a look at the model with the best hyperparameter configuration:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"03381142-c967-46a7-a992-6ab2fb7e199d"},{"version":"CommandV1","origId":2681151230257458,"guid":"088d3851-572f-4fda-accf-f89e22b7f41c","subtype":"command","commandType":"auto","position":50.0,"command":"# Zip the two lists together\nresults = list(zip(cvModel.getEstimatorParamMaps(), cvModel.avgMetrics))\n\n# And pretty print 'em\nfor x in results:\n  numTrees, rmse = list(x[0].values())\n  print(\"Depth: %s, Trees: %s\\nAverage: %s\\n\" % (numTrees, rmse, x[1]))\n  \nprint(\"-\"*80)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"9fb895a2-55ff-4a83-a5c0-8ff6988c0408"},{"version":"CommandV1","origId":2681151230257459,"guid":"dd237b69-fe74-4392-a998-b1e4f1add46a","subtype":"command","commandType":"auto","position":51.0,"command":"%md\n##![Spark Logo Tiny](https://files.training.databricks.com/images/105/logo_spark_tiny.png) One last set of predictions\n\nUsing our newest mode, let's make a final set of predictions:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"608b891a-d892-44ef-9066-fe2da649aa02"},{"version":"CommandV1","origId":2681151230257460,"guid":"1df95ad4-df4d-4e2b-8786-9b1d1be263db","subtype":"command","commandType":"auto","position":52.0,"command":"# Using the model, create our predictions from the test data\nfinalPredictionsDF = cvModel.transform(testDF)\n\n# Reorder the columns for easier interpretation\nfinalDF = finalPredictionsDF.select(\"cnt\", \"prediction\", \"yr\", \"yrIndex\", \"mnth\", \"hr\", \"workingday\", \"workingdayIndex\", \"weathersit\", \"weathersitIndex\", \"temp\", \"atemp\", \"hum\", \"windspeed\")\n\ndisplay(finalDF)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"f2eeda66-7b7f-418a-ad34-49cf0a32d556"},{"version":"CommandV1","origId":2681151230257461,"guid":"66dfdac2-0708-450f-8295-aae97fd7c26a","subtype":"command","commandType":"auto","position":53.0,"command":"%md\n##![Spark Logo Tiny](https://files.training.databricks.com/images/105/logo_spark_tiny.png) Evaluating the New Model\n\nLet's see how our latest model does:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"74678894-f753-4002-8176-d7148dd79d61"},{"version":"CommandV1","origId":2681151230257462,"guid":"4e7de936-5e9d-4da7-bcc3-e64231e2220b","subtype":"command","commandType":"auto","position":54.0,"command":"print(\"Test RMSE = %f\" % evaluator.evaluate(finalPredictionsDF))","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"d4b40e74-b505-4fac-90f5-6e1c1e91922a"},{"version":"CommandV1","origId":2681151230257463,"guid":"4e665996-59cd-4712-a7cc-ba537bb4a84f","subtype":"command","commandType":"auto","position":55.0,"command":"%md-sandbox\n&copy; 2018 Databricks, Inc. All rights reserved.<br/>\nApache, Apache Spark, Spark and the Spark logo are trademarks of the <a href=\"http://www.apache.org/\">Apache Software Foundation</a>.<br/>\n<br/>\n<a href=\"https://databricks.com/privacy-policy\">Privacy Policy</a> | <a href=\"https://databricks.com/terms-of-use\">Terms of Use</a> | <a href=\"http://help.databricks.com/\">Support</a>","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"b8f4f049-9ab6-49e5-9b63-a50e9e442900"}],"dashboards":[],"guid":"0b134da8-9d39-426f-b93c-e9e811e8d499","globalVars":{},"iPythonMetadata":null,"inputWidgets":{}}