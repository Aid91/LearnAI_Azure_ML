{"version":"NotebookV1","origId":3721489431276068,"name":"env_setup","language":"python","commands":[{"version":"CommandV1","origId":3721489431276069,"guid":"3fb2c810-0ff1-458e-b19a-ae5c82dfca88","subtype":"command","commandType":"auto","position":1.0,"command":"%scala\nval tags = com.databricks.logging.AttributionContext.current.tags\n\n//*******************************************\n// GET VERSION OF APACHE SPARK\n//*******************************************\n\n// Get the version of spark\nval Array(sparkMajorVersion, sparkMinorVersion, _) = spark.version.split(\"\"\"\\.\"\"\")\n\n// Set the major and minor versions\nspark.conf.set(\"com.databricks.training.spark.major-version\", sparkMajorVersion)\nspark.conf.set(\"com.databricks.training.spark.minor-version\", sparkMinorVersion)\n\n//*******************************************\n// GET VERSION OF DATABRICKS RUNTIME\n//*******************************************\n\n// Get the version of the Databricks Runtime\nval runtimeVersion = tags.collect({ case (t, v) if t.name == \"sparkVersion\" => v }).head\nval runtimeVersions = runtimeVersion.split(\"\"\"-\"\"\")\nval (dbrVersion, scalaVersion) = if (runtimeVersions.size == 3) {\n  val Array(dbrVersion, _, scalaVersion) = runtimeVersions\n  (dbrVersion, scalaVersion.replace(\"scala\", \"\"))\n} else {\n  val Array(dbrVersion, scalaVersion) = runtimeVersions\n  (dbrVersion, scalaVersion.replace(\"scala\", \"\"))\n}\nval Array(dbrMajorVersion, dbrMinorVersion, _) = dbrVersion.split(\"\"\"\\.\"\"\")\n\n// Set the the major and minor versions\nspark.conf.set(\"com.databricks.training.dbr.major-version\", dbrMajorVersion)\nspark.conf.set(\"com.databricks.training.dbr.minor-version\", dbrMinorVersion)\n\n//*******************************************\n// GET USERNAME AND USERHOME\n//*******************************************\n\n// Get the user's name\nval username = tags.getOrElse(com.databricks.logging.BaseTagDefinitions.TAG_USER, java.util.UUID.randomUUID.toString.replace(\"-\", \"\"))\n\n// Get the user's home. Create it if necessary\nval userhome = s\"dbfs:/user/$username\"\n// This call doesn't fail if it already exists\nval created = dbutils.fs.mkdirs(userhome)\n\n// Set the user's name and home directory\nspark.conf.set(\"com.databricks.training.username\", username)\nspark.conf.set(\"com.databricks.training.userhome\", userhome)\n\n//**********************************\n// VARIOUS UTILITY FUNCTIONS\n//**********************************\n\ndef assertSparkVersion(expMajor:Int, expMinor:Int):String = {\n  val major = spark.conf.get(\"com.databricks.training.spark.major-version\")\n  val minor = spark.conf.get(\"com.databricks.training.spark.minor-version\")\n\n  if ((major.toInt < expMajor) || (major.toInt == expMajor && minor.toInt < expMinor))\n    throw new IllegalArgumentException(s\"This notebook must be ran on Spark version $expMajor.$expMinor or better, found Spark $major.$minor\")\n\n  s\"$major.$minor\"\n}\n\ndef requireDbrVersion(version:String):Unit = {\n  val major = spark.conf.get(\"com.databricks.training.dbr.major-version\")\n  val minor = spark.conf.get(\"com.databricks.training.dbr.minor-version\")\n  val dbrVersion = major+\".\"+minor\n  \n  if (version != dbrVersion) {\n    throw new IllegalArgumentException(s\"This notebook must be ran on Databricks Runtime (DBR) $version version, found DBR $dbrVersion.\")\n  }\n}\n\ndef assertDbrVersion(expMajor:Int, expMinor:Int):String = {\n  val major = spark.conf.get(\"com.databricks.training.dbr.major-version\")\n  val minor = spark.conf.get(\"com.databricks.training.dbr.minor-version\")\n\n  if ((major.toInt < expMajor) || (major.toInt == expMajor && minor.toInt < expMinor))\n    throw new IllegalArgumentException(s\"This notebook must be ran on Databricks Runtime (DBR) version $expMajor.$expMinor or better, found DBR $major.$minor.\")\n  \n  s\"$major.$minor\"\n}\n\ndisplayHTML(s\"\"\"\n  <div>Successfully created class variables and utility functions.</div>\n  <li><b>username</b>: $username</li>\n  <li><b>userhome</b>: $userhome</li>\n\"\"\")","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4482023599955268","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"ce0e922e-bcd4-490b-86ff-635da9c343b4"},{"version":"CommandV1","origId":3721489431276070,"guid":"dfb5ea9c-b55f-41cf-8392-ef51b9053816","subtype":"command","commandType":"auto","position":2.0,"command":"%python\n\nfrom __future__ import print_function\nfrom __future__ import division\n\n#**********************************\n# VARIOUS UTILITY FUNCTIONS\n#**********************************\n\ndef assertSparkVersion(expMajor, expMinor):\n  major = spark.conf.get(\"com.databricks.training.spark.major-version\")\n  minor = spark.conf.get(\"com.databricks.training.spark.minor-version\")\n\n  if (int(major) < expMajor) or (int(major) == expMajor and int(minor) < expMinor):\n    msg = \"This notebook must run on Spark version {}.{} or better, found.\".format(expMajor, expMinor, major, minor)\n    raise Exception(msg)\n\n  return major+\".\"+minor\n\ndef assertDbrVersion(expMajor, expMinor):\n  major = spark.conf.get(\"com.databricks.training.dbr.major-version\")\n  minor = spark.conf.get(\"com.databricks.training.dbr.minor-version\")\n\n  if (int(major) < expMajor) or (int(major) == expMajor and int(minor) < expMinor):\n    msg = \"This notebook must run on Databricks Runtime (DBR) version {}.{} or better, found.\".format(expMajor, expMinor, major, minor)\n    raise Exception(msg)\n    \n  return major+\".\"+minor\n\n#**********************************\n# INIT VARIOUS VARIABLES\n#**********************************\n\nusername = spark.conf.get(\"com.databricks.training.username\")\nuserhome = spark.conf.get(\"com.databricks.training.userhome\")\n\nimport sys\npythonVersion = spark.conf.set(\"com.databricks.training.python-version\", sys.version[0:sys.version.index(\" \")])\n\nNone # suppress output","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4482023599955268","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"b2c2a873-4b79-4043-988c-46292a75c2a3"}],"dashboards":[],"guid":"d9e214ae-a401-428a-8f05-d34386862a62","globalVars":{},"iPythonMetadata":null,"inputWidgets":{}}