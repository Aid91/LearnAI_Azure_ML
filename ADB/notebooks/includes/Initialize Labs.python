{"version":"NotebookV1","origId":4078960254879074,"name":"Initialize Labs","language":"python","commands":[{"version":"CommandV1","origId":4078960254879075,"guid":"9243f99e-2844-44cc-b33d-16e07a6ad734","subtype":"command","commandType":"auto","position":1.0,"command":"%python\ntestResults = dict()\n\ndef toHash(value):\n  from pyspark.sql.functions import hash\n  from pyspark.sql.functions import abs\n  values = [(value,)]\n  return spark.createDataFrame(values, [\"value\"]).select(abs(hash(\"value\")).cast(\"int\")).first()[0]\n\ndef clearYourResults(passedOnly = True):\n  whats = list(testResults.keys())\n  for what in whats:\n    passed = testResults[what][0]\n    if passed or passedOnly == False : del testResults[what]\n\ndef validateYourSchema(what, df, expColumnName, expColumnType = None):\n  label = \"{}:{}\".format(expColumnName, expColumnType)\n  key = \"{} contains {}\".format(what, label)\n\n  try:\n    actualType = df.schema[expColumnName].dataType.typeName()\n    \n    if expColumnType == None: \n      testResults[key] = (True, \"validated\")\n      print(\"\"\"{}: validated\"\"\".format(key))\n    elif actualType == expColumnType:\n      testResults[key] = (True, \"validated\")\n      print(\"\"\"{}: validated\"\"\".format(key))\n    else:\n      answerStr = \"{}:{}\".format(expColumnName, actualType)\n      testResults[key] = (False, answerStr)\n      print(\"\"\"{}: NOT matching ({})\"\"\".format(key, answerStr))\n  except:\n      testResults[what] = (False, \"-not found-\")\n      print(\"{}: NOT found\".format(key))\n      \ndef validateYourAnswer(what, expectedHash, answer):\n  # Convert the value to string, remove new lines and carriage returns and then escape quotes\n  if (answer == None): answerStr = \"null\"\n  elif (answer == True): answerStr = \"true\"\n  elif (answer == False): answerStr = \"false\"\n  else: answerStr = str(answer)\n\n  hashValue = toHash(answerStr)\n  \n  if (hashValue == expectedHash):\n    testResults[what] = (True, answerStr)\n    print(\"\"\"{} was correct, your answer: {}\"\"\".format(what, answerStr))\n  else:\n    testResults[what] = (False, answerStr)\n    print(\"\"\"{} was NOT correct, your answer: {}\"\"\".format(what, answerStr))\n\ndef summarizeYourResults():\n  html = \"\"\"<html><body><div style=\"font-weight:bold; font-size:larger; border-bottom: 1px solid #f0f0f0\">Your Answers</div><table style='margin:0'>\"\"\"\n\n  whats = list(testResults.keys())\n  whats.sort()\n  for what in whats:\n    passed = testResults[what][0]\n    answer = testResults[what][1]\n    color = \"green\" if (passed) else \"red\" \n    passFail = \"passed\" if (passed) else \"FAILED\" \n    html += \"\"\"<tr style='font-size:larger; white-space:pre'>\n                  <td>{}:&nbsp;&nbsp;</td>\n                  <td style=\"color:{}; text-align:center; font-weight:bold\">{}</td>\n                  <td style=\"white-space:pre; font-family: monospace\">&nbsp;&nbsp;{}</td>\n                </tr>\"\"\".format(what, color, passFail, answer)\n  html += \"</table></body></html>\"\n  displayHTML(html)\n\nNone","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"abdd1638-bd61-42e4-8336-2c52f643d109"},{"version":"CommandV1","origId":4078960254879076,"guid":"09406741-c85e-4549-91a0-e14600a8ea74","subtype":"command","commandType":"auto","position":2.0,"command":"%scala\nimport org.apache.spark.sql.DataFrame\n\nval testResults = scala.collection.mutable.Map[String, (Boolean, String)]()\n\ndef toHash(value:String):Int = {\n  import org.apache.spark.sql.functions.hash\n  import org.apache.spark.sql.functions.abs\n  spark.createDataset(List(value)).select(abs(hash($\"value\")).cast(\"int\")).as[Int].first()\n}\n\ndef clearYourResults(passedOnly:Boolean = true):Unit = {\n  val whats = testResults.keySet.toSeq.sorted\n  for (what <- whats) {\n    val passed = testResults(what)._1\n    if (passed || passedOnly == false) testResults.remove(what)\n  }\n}\n\ndef validateYourSchema(what:String, df:DataFrame, expColumnName:String, expColumnType:String = null):Unit = {\n  val label = s\"$expColumnName:$expColumnType\"\n  val key = s\"$what contains $label\"\n  \n  try{\n    val actualType = df.schema(expColumnName).dataType.typeName\n    \n    if (expColumnType == null) {\n      testResults.put(key,(true, \"validated\"))\n      println(s\"\"\"$key: validated\"\"\")\n      \n    } else if (actualType == expColumnType) {\n      val answerStr = \"%s:%s\".format(expColumnName, actualType)\n      testResults.put(key,(true, \"validated\"))\n      println(s\"\"\"$key: validated\"\"\")\n      \n    } else {\n      val answerStr = \"%s:%s\".format(expColumnName, actualType)\n      testResults.put(key,(false, answerStr))\n      println(s\"\"\"$key: NOT matching ($answerStr)\"\"\")\n    }\n  } catch {\n    case e:java.lang.IllegalArgumentException => {\n      testResults.put(key,(false, \"-not found-\"))\n      println(s\"$key: NOT found\")\n    }\n  }\n}\n\ndef validateYourAnswer(what:String, expectedHash:Int, answer:Any):Unit = {\n  // Convert the value to string, remove new lines and carriage returns and then escape quotes\n  val answerStr = if (answer == null) \"null\" \n  else answer.toString\n\n  val hashValue = toHash(answerStr)\n\n  if (hashValue == expectedHash) {\n    testResults.put(what,(true, answerStr))\n    println(s\"\"\"$what was correct, your answer: ${answerStr}\"\"\")\n  } else{\n    testResults.put(what,(false, answerStr))\n    println(s\"\"\"$what was NOT correct, your answer: ${answerStr}\"\"\")\n  }\n}\n\ndef summarizeYourResults():Unit = {\n  var html = \"\"\"<html><body><div style=\"font-weight:bold; font-size:larger; border-bottom: 1px solid #f0f0f0\">Your Answers</div><table style='margin:0'>\"\"\"\n\n  val whats = testResults.keySet.toSeq.sorted\n  for (what <- whats) {\n    val passed = testResults(what)._1\n    val answer = testResults(what)._2\n    val color = if (passed) \"green\" else \"red\" \n    val passFail = if (passed) \"passed\" else \"FAILED\" \n    html += s\"\"\"<tr style='font-size:larger; white-space:pre'>\n                  <td>${what}:&nbsp;&nbsp;</td>\n                  <td style=\"color:${color}; text-align:center; font-weight:bold\">${passFail}</td>\n                  <td style=\"white-space:pre; font-family: monospace\">&nbsp;&nbsp;${answer}</td>\n                </tr>\"\"\"\n  }\n  html += \"</table></body></html>\"\n  displayHTML(html)\n}\n\ndisplayHTML(\"\"\"\n  <div>Initializing lab environment:</div>\n  <li>Declared <b>clearYourResults(..)</b></li>\n  <li>Declared <b>validateYourSchema(..)</b></li>\n  <li>Declared <b>validateYourAnswer(..)</b></li>\n  <li>Declared <b>summarizeYourResults(..)</b></li>\n\"\"\")","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"61ed2e87-39ca-465d-ae99-854517755439"}],"dashboards":[],"guid":"3f197c61-79ac-4595-a3ac-cd18c43910c6","globalVars":{},"iPythonMetadata":null,"inputWidgets":{}}