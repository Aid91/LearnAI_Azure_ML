{"version":"NotebookV1","origId":4078960254879089,"name":"02_deep_learning","language":"python","commands":[{"version":"CommandV1","origId":4078960254879090,"guid":"c21fb4b6-1833-42fc-9e44-0ca6bc2d2b44","subtype":"command","commandType":"auto","position":1.0,"command":"%md Copyright (c) Microsoft Corporation. All rights reserved.  \n\nLicensed under the MIT License.","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"e9372271-4663-4296-8cf9-3827e1afbb73"},{"version":"CommandV1","origId":4078960254879091,"guid":"28f75fbd-5092-41a1-b247-282cb1e6c770","subtype":"command","commandType":"auto","position":2.0,"command":"%md # Train, hyperparameter tune, and deploy with PyTorch\n\nIn this tutorial, you will train, hyperparameter tune, and deploy a PyTorch model using the Azure Machine Learning (Azure ML) Python SDK.\n\nThis tutorial will train an image classification model using transfer learning, based on PyTorch's [Transfer Learning tutorial](https://pytorch.org/tutorials/beginner/transfer_learning_tutorial.html). The model is trained to classify ants and bees by first using a pretrained ResNet18 model that has been trained on the [ImageNet](http://image-net.org/index) dataset.","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"f505d855-4e90-4cb6-8d49-783fe925d912"},{"version":"CommandV1","origId":4078960254879092,"guid":"6bc6f031-f439-403a-bcc0-520bf4191396","subtype":"command","commandType":"auto","position":3.0,"command":"%md ## Prerequisites\n* Go through the [Configuration](https://github.com/Azure/MachineLearningNotebooks/blob/master/configuration.ipynb) notebook to install the Azure Machine Learning Python SDK and create an Azure ML `Workspace`","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"62cdb501-365c-4806-a678-610cc3768f0e"},{"version":"CommandV1","origId":4078960254879093,"guid":"d3a08d4a-d03e-43b7-878e-dbe6672a820e","subtype":"command","commandType":"auto","position":4.0,"command":"# Check core SDK version number\nimport azureml.core\n\nprint(\"SDK version:\", azureml.core.VERSION)","commandVersion":1,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\">SDK version: 1.0.6\n</div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[]},"errorSummary":"<span class=\"ansired\">ImportError</span>: No module named &apos;azureml&apos;","error":"<div class=\"ansiout\"><span class=\"ansired\">---------------------------------------------------------------------------</span>\n<span class=\"ansired\">ImportError</span>                               Traceback (most recent call last)\n<span class=\"ansigreen\">&lt;command-797372779939809&gt;</span> in <span class=\"ansicyan\">&lt;module&gt;</span><span class=\"ansiblue\">()</span>\n<span class=\"ansigreen\">      1</span> <span class=\"ansired\"># Check core SDK version number</span><span class=\"ansiyellow\"></span><span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">----&gt; 2</span><span class=\"ansiyellow\"> </span><span class=\"ansigreen\">import</span> azureml<span class=\"ansiyellow\">.</span>core<span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">      3</span> <span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">      4</span> print<span class=\"ansiyellow\">(</span><span class=\"ansiblue\">&quot;SDK version:&quot;</span><span class=\"ansiyellow\">,</span> azureml<span class=\"ansiyellow\">.</span>core<span class=\"ansiyellow\">.</span>VERSION<span class=\"ansiyellow\">)</span><span class=\"ansiyellow\"></span>\n\n<span class=\"ansired\">ImportError</span>: No module named &apos;azureml&apos;</div>","workflows":[],"startTime":1546653635185,"submitTime":1546653635172,"finishTime":1546653635798,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"wopauli@microsoft.com","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"726c1743-413f-4e89-97e9-572e01536f73"},{"version":"CommandV1","origId":4078960254879094,"guid":"8f3e2bee-0bb4-42c9-b796-090bf5b6c3e5","subtype":"command","commandType":"auto","position":5.0,"command":"%md ## Diagnostics\nOpt-in diagnostics for better experience, quality, and security of future releases.","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"ced2dc02-07f7-4bfc-bf1b-439536cde7ea"},{"version":"CommandV1","origId":4078960254879095,"guid":"407fd58b-a87a-4cfc-a329-b598f427130f","subtype":"command","commandType":"auto","position":6.0,"command":"from azureml.telemetry import set_diagnostics_collection\n\nset_diagnostics_collection(send_diagnostics=True)","commandVersion":1,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\">Turning diagnostics collection on. \n</div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[]},"errorSummary":"<span class=\"ansired\">ImportError</span>: No module named &apos;azureml.telemetry&apos;","error":"<div class=\"ansiout\"><span class=\"ansired\">---------------------------------------------------------------------------</span>\n<span class=\"ansired\">ImportError</span>                               Traceback (most recent call last)\n<span class=\"ansigreen\">&lt;command-797372779939811&gt;</span> in <span class=\"ansicyan\">&lt;module&gt;</span><span class=\"ansiblue\">()</span>\n<span class=\"ansigreen\">----&gt; 1</span><span class=\"ansiyellow\"> </span><span class=\"ansigreen\">from</span> azureml<span class=\"ansiyellow\">.</span>telemetry <span class=\"ansigreen\">import</span> set_diagnostics_collection<span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">      2</span> <span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">      3</span> set_diagnostics_collection<span class=\"ansiyellow\">(</span>send_diagnostics<span class=\"ansiyellow\">=</span><span class=\"ansigreen\">True</span><span class=\"ansiyellow\">)</span><span class=\"ansiyellow\"></span>\n\n<span class=\"ansired\">ImportError</span>: No module named &apos;azureml.telemetry&apos;</div>","workflows":[],"startTime":1546655920946,"submitTime":1546655920584,"finishTime":1546655920974,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"wopauli@microsoft.com","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":{"tags":["Diagnostics"]},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"14e6fbeb-89dc-4d75-a1fd-192dd81cd2e6"},{"version":"CommandV1","origId":4078960254879096,"guid":"6d606d5b-0186-4483-8a7a-455805af6533","subtype":"command","commandType":"auto","position":7.0,"command":"%md ## Initialize workspace\nInitialize a [Workspace](https://docs.microsoft.com/azure/machine-learning/service/concept-azure-machine-learning-architecture#workspace) object from the existing workspace you created in the Prerequisites step. `Workspace.from_config()` creates a workspace object from the details stored in `config.json`.","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"3cad055c-1316-42a0-a11a-c89996ec65a9"},{"version":"CommandV1","origId":4078960254879097,"guid":"a0fe6191-472f-4011-89b6-de67c118f21d","subtype":"command","commandType":"auto","position":8.0,"command":"from azureml.core.workspace import Workspace\n\nconfig_file='/dbfs/tmp/aml_config/config.json'\n\nws = Workspace.from_config(config_file)\nprint('Workspace name: ' + ws.name, \n      'Azure region: ' + ws.location, \n      'Subscription id: ' + ws.subscription_id, \n      'Resource group: ' + ws.resource_group, sep = '\\n')","commandVersion":1,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\">Found the config file in: /dbfs/tmp/aml_config/config.json\nWorkspace name: myADBworkspace\nAzure region: westus2\nSubscription id: 5be49961-ea44-42ec-8021-b728be90d58c\nResource group: learnai_ai_airlift\n</div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[]},"errorSummary":"<span class=\"ansired\">UserErrorException</span>: The provided path: /dbfs/tmp/config.json does not point to a file. Please make sure to provide the full path to the config file, including the file name and extension.","error":"<div class=\"ansiout\"><span class=\"ansired\">---------------------------------------------------------------------------</span>\n<span class=\"ansired\">UserErrorException</span>                        Traceback (most recent call last)\n<span class=\"ansigreen\">&lt;command-797372779939813&gt;</span> in <span class=\"ansicyan\">&lt;module&gt;</span><span class=\"ansiblue\">()</span>\n<span class=\"ansigreen\">      3</span> config_path<span class=\"ansiyellow\">=</span><span class=\"ansiblue\">&apos;/dbfs/tmp/&apos;</span><span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">      4</span> <span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">----&gt; 5</span><span class=\"ansiyellow\"> </span>ws <span class=\"ansiyellow\">=</span> Workspace<span class=\"ansiyellow\">.</span>from_config<span class=\"ansiyellow\">(</span>config_path <span class=\"ansiyellow\">+</span> <span class=\"ansiblue\">&apos;config.json&apos;</span><span class=\"ansiyellow\">)</span><span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">      6</span> print(&apos;Workspace name: &apos; + ws.name, \n<span class=\"ansigreen\">      7</span>       <span class=\"ansiblue\">&apos;Azure region: &apos;</span> <span class=\"ansiyellow\">+</span> ws<span class=\"ansiyellow\">.</span>location<span class=\"ansiyellow\">,</span><span class=\"ansiyellow\"></span>\n\n<span class=\"ansigreen\">/databricks/python/lib/python3.5/site-packages/azureml/core/workspace.py</span> in <span class=\"ansicyan\">from_config</span><span class=\"ansiblue\">(path, auth)</span>\n<span class=\"ansigreen\">    113</span>                 raise UserErrorException(&apos;The provided path: {} does not point to a file. Please make &apos;\n<span class=\"ansigreen\">    114</span>                                          <span class=\"ansiblue\">&apos;sure to provide the full path to the config file, including &apos;</span><span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">--&gt; 115</span><span class=\"ansiyellow\">                                          &apos;the file name and extension.&apos;.format(normalized_path))\n</span><span class=\"ansigreen\">    116</span>             found_path <span class=\"ansiyellow\">=</span> normalized_path<span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">    117</span> <span class=\"ansiyellow\"></span>\n\n<span class=\"ansired\">UserErrorException</span>: The provided path: /dbfs/tmp/config.json does not point to a file. Please make sure to provide the full path to the config file, including the file name and extension.</div>","workflows":[],"startTime":1546656609063,"submitTime":1546656609050,"finishTime":1546656609618,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"wopauli@microsoft.com","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"064a8129-c60d-4d52-95e0-dcb5be4179b0"},{"version":"CommandV1","origId":4078960254879098,"guid":"9b35fcae-d048-4f52-b4ea-73ad9c20e49b","subtype":"command","commandType":"auto","position":9.0,"command":"%md ## Create or Attach existing AmlCompute\nYou will need to create a [compute target](https://docs.microsoft.com/azure/machine-learning/service/concept-azure-machine-learning-architecture#compute-target) for training your model. In this tutorial, we use Azure ML managed compute ([AmlCompute](https://docs.microsoft.com/azure/machine-learning/service/how-to-set-up-training-targets#amlcompute)) for our remote training compute resource.\n\n**Creation of AmlCompute takes approximately 5 minutes.** If the AmlCompute with that name is already in your workspace, this code will skip the creation process.\n\nAs with other Azure services, there are limits on certain resources (e.g. AmlCompute) associated with the Azure Machine Learning service. Please read [this article](https://docs.microsoft.com/en-us/azure/machine-learning/service/how-to-manage-quotas) on the default limits and how to request more quota.","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"31522177-baf7-49c1-91fd-b13e673ce000"},{"version":"CommandV1","origId":4078960254879099,"guid":"60fb9732-444e-4949-8b44-aab90391b3c4","subtype":"command","commandType":"auto","position":10.0,"command":"from azureml.core.compute import ComputeTarget, AmlCompute\nfrom azureml.core.compute_target import ComputeTargetException\n\n# choose a name for your cluster\ncluster_name = \"aml-compute\"\n\ntry:\n    compute_target = ComputeTarget(workspace=ws, name=cluster_name)\n    print('Found existing compute target.')\nexcept ComputeTargetException:\n    print('Creating a new compute target...')\n    compute_config = AmlCompute.provisioning_configuration(vm_size='STANDARD_NC6',\n                                                           min_nodes=0,\n                                                           max_nodes=4,\n                                                           idle_seconds_before_scaledown=1800)\n\n    # create the cluster\n    compute_target = ComputeTarget.create(ws, cluster_name, compute_config)\n\n    compute_target.wait_for_completion(show_output=True)\n\n# use get_status() to get a detailed status for the current cluster. \nprint(compute_target.get_status().serialize())","commandVersion":1,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\">Creating a new compute target...\nCreating\nSucceeded\nAmlCompute wait for completion finished\nMinimum number of nodes requested have been provisioned\n{&apos;scaleSettings&apos;: {&apos;nodeIdleTimeBeforeScaleDown&apos;: &apos;PT120S&apos;, &apos;maxNodeCount&apos;: 4, &apos;minNodeCount&apos;: 0}, &apos;modifiedTime&apos;: &apos;2019-01-05T02:52:21.851111+00:00&apos;, &apos;currentNodeCount&apos;: 0, &apos;targetNodeCount&apos;: 0, &apos;creationTime&apos;: &apos;2019-01-05T02:51:42.047290+00:00&apos;, &apos;vmPriority&apos;: &apos;Dedicated&apos;, &apos;vmSize&apos;: &apos;STANDARD_NC6&apos;, &apos;allocationStateTransitionTime&apos;: &apos;2019-01-05T02:52:20.331000+00:00&apos;, &apos;allocationState&apos;: &apos;Steady&apos;, &apos;provisioningState&apos;: &apos;Succeeded&apos;, &apos;errors&apos;: None, &apos;nodeStateCounts&apos;: {&apos;leavingNodeCount&apos;: 0, &apos;unusableNodeCount&apos;: 0, &apos;preemptedNodeCount&apos;: 0, &apos;preparingNodeCount&apos;: 0, &apos;runningNodeCount&apos;: 0, &apos;idleNodeCount&apos;: 0}, &apos;provisioningStateTransitionTime&apos;: None}\n</div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[]},"errorSummary":null,"error":null,"workflows":[],"startTime":1546656700328,"submitTime":1546656700311,"finishTime":1546656746546,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"wopauli@microsoft.com","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"2b0970cd-85cc-4f89-a22d-9d672b597315"},{"version":"CommandV1","origId":4078960254879100,"guid":"e76b2a84-7426-4572-a7f2-2e86a8b8e201","subtype":"command","commandType":"auto","position":11.0,"command":"%md The above code creates a GPU cluster. If you instead want to create a CPU cluster, provide a different VM size to the `vm_size` parameter, such as `STANDARD_D2_V2`.","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"f1293b7f-9545-4728-8928-108d6173d18a"},{"version":"CommandV1","origId":4078960254879101,"guid":"d788f80e-6c7a-48c1-8b42-94263b82fce5","subtype":"command","commandType":"auto","position":12.0,"command":"%md ## Train model on the remote compute\nNow that you have your data and training script prepared, you are ready to train on your remote compute cluster. You can take advantage of Azure compute to leverage GPUs to cut down your training time. ","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"d48e599e-3f99-4cb6-8707-9b8280c186b5"},{"version":"CommandV1","origId":4078960254879102,"guid":"f2f78654-b08f-4a88-9dd9-5aca20c22e86","subtype":"command","commandType":"auto","position":13.0,"command":"%md ### Create a project directory\nCreate a directory that will contain all the necessary code from your local machine that you will need access to on the remote resource. This includes the training script and any additional files your training script depends on.","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"cb213735-a495-43a7-b41e-ece4a52402a0"},{"version":"CommandV1","origId":4078960254879103,"guid":"78dec53a-4dd6-4f75-954f-e2b3e40ac2e7","subtype":"command","commandType":"auto","position":14.0,"command":"import os\n\nproject_folder = './pytorch-hymenoptera'\nos.makedirs(project_folder, exist_ok=True)","commandVersion":1,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\"></div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[]},"errorSummary":null,"error":null,"workflows":[],"startTime":1546657088486,"submitTime":1546657088459,"finishTime":1546657088507,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"wopauli@microsoft.com","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"b75b119b-4229-4ffd-938d-dc8da90e4603"},{"version":"CommandV1","origId":4078960254879104,"guid":"6be06113-13e4-4824-967e-5a8b9efaf813","subtype":"command","commandType":"auto","position":14.5,"command":"%md \n\n### Download training script","commandVersion":0,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\"></div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[]},"errorSummary":null,"error":null,"workflows":[],"startTime":1546657122937,"submitTime":1546657122915,"finishTime":1546657122972,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"wopauli@microsoft.com","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"5d70893e-f276-4d39-b9ff-fd934b038f5f"},{"version":"CommandV1","origId":4078960254879105,"guid":"673d98d8-b14f-42cf-bc40-3946636cc5b9","subtype":"command","commandType":"auto","position":14.75,"command":"import urllib\n\ntraining_script = 'pytorch_train.py'\ncontainer = 'https://sethmottstore.blob.core.windows.net/databricks/'\n\nurllib.request.urlretrieve(container + training_script, filename=os.path.join(project_folder, training_script))\n\nwith open(os.path.join(project_folder, training_script), 'r') as f:\n  print(f.read())\n  ","commandVersion":0,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\"># Copyright (c) 2017, PyTorch contributors\n# Modifications copyright (C) Microsoft Corporation\n# Licensed under the BSD license\n# Adapted from https://pytorch.org/tutorials/beginner/transfer_learning_tutorial.html\n\nfrom __future__ import print_function, division\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\nfrom torch.optim import lr_scheduler\nfrom torchvision import datasets, models, transforms\nimport numpy as np\nimport time\nimport os\nimport copy\nimport argparse\n\nfrom azureml.core.run import Run\n# get the Azure ML run object\nrun = Run.get_context()\n\n\ndef load_data(data_dir):\n    &quot;&quot;&quot;Load the train/val data.&quot;&quot;&quot;\n\n    # Data augmentation and normalization for training\n    # Just normalization for validation\n    data_transforms = {\n        &apos;train&apos;: transforms.Compose([\n            transforms.RandomResizedCrop(224),\n            transforms.RandomHorizontalFlip(),\n            transforms.ToTensor(),\n            transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])\n        ]),\n        &apos;val&apos;: transforms.Compose([\n            transforms.Resize(256),\n            transforms.CenterCrop(224),\n            transforms.ToTensor(),\n            transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])\n        ]),\n    }\n\n    image_datasets = {x: datasets.ImageFolder(os.path.join(data_dir, x),\n                                              data_transforms[x])\n                      for x in [&apos;train&apos;, &apos;val&apos;]}\n    dataloaders = {x: torch.utils.data.DataLoader(image_datasets[x], batch_size=4,\n                                                  shuffle=True, num_workers=4)\n                   for x in [&apos;train&apos;, &apos;val&apos;]}\n    dataset_sizes = {x: len(image_datasets[x]) for x in [&apos;train&apos;, &apos;val&apos;]}\n    class_names = image_datasets[&apos;train&apos;].classes\n\n    return dataloaders, dataset_sizes, class_names\n\n\ndef train_model(model, criterion, optimizer, scheduler, num_epochs, data_dir):\n    &quot;&quot;&quot;Train the model.&quot;&quot;&quot;\n\n    # load training/validation data\n    dataloaders, dataset_sizes, class_names = load_data(data_dir)\n\n    device = torch.device(&apos;cuda:0&apos; if torch.cuda.is_available() else &apos;cpu&apos;)\n\n    since = time.time()\n\n    best_model_wts = copy.deepcopy(model.state_dict())\n    best_acc = 0.0\n\n    for epoch in range(num_epochs):\n        print(&apos;Epoch {}/{}&apos;.format(epoch, num_epochs - 1))\n        print(&apos;-&apos; * 10)\n\n        # Each epoch has a training and validation phase\n        for phase in [&apos;train&apos;, &apos;val&apos;]:\n            if phase == &apos;train&apos;:\n                scheduler.step()\n                model.train()  # Set model to training mode\n            else:\n                model.eval()   # Set model to evaluate mode\n\n            running_loss = 0.0\n            running_corrects = 0\n\n            # Iterate over data.\n            for inputs, labels in dataloaders[phase]:\n                inputs = inputs.to(device)\n                labels = labels.to(device)\n\n                # zero the parameter gradients\n                optimizer.zero_grad()\n\n                # forward\n                # track history if only in train\n                with torch.set_grad_enabled(phase == &apos;train&apos;):\n                    outputs = model(inputs)\n                    _, preds = torch.max(outputs, 1)\n                    loss = criterion(outputs, labels)\n\n                    # backward + optimize only if in training phase\n                    if phase == &apos;train&apos;:\n                        loss.backward()\n                        optimizer.step()\n\n                # statistics\n                running_loss += loss.item() * inputs.size(0)\n                running_corrects += torch.sum(preds == labels.data)\n\n            epoch_loss = running_loss / dataset_sizes[phase]\n            epoch_acc = running_corrects.double() / dataset_sizes[phase]\n\n            print(&apos;{} Loss: {:.4f} Acc: {:.4f}&apos;.format(\n                phase, epoch_loss, epoch_acc))\n\n            # deep copy the model\n            if phase == &apos;val&apos; and epoch_acc &gt; best_acc:\n                best_acc = epoch_acc\n                best_model_wts = copy.deepcopy(model.state_dict())\n\n            # log the best val accuracy to AML run\n            run.log(&apos;best_val_acc&apos;, np.float(best_acc))\n\n        print()\n\n    time_elapsed = time.time() - since\n    print(&apos;Training complete in {:.0f}m {:.0f}s&apos;.format(\n        time_elapsed // 60, time_elapsed % 60))\n    print(&apos;Best val Acc: {:4f}&apos;.format(best_acc))\n\n    # load best model weights\n    model.load_state_dict(best_model_wts)\n    return model\n\n\ndef fine_tune_model(num_epochs, data_dir, learning_rate, momentum):\n    &quot;&quot;&quot;Load a pretrained model and reset the final fully connected layer.&quot;&quot;&quot;\n\n    # log the hyperparameter metrics to the AML run\n    run.log(&apos;lr&apos;, np.float(learning_rate))\n    run.log(&apos;momentum&apos;, np.float(momentum))\n\n    model_ft = models.resnet18(pretrained=True)\n    num_ftrs = model_ft.fc.in_features\n    model_ft.fc = nn.Linear(num_ftrs, 2)  # only 2 classes to predict\n\n    device = torch.device(&apos;cuda:0&apos; if torch.cuda.is_available() else &apos;cpu&apos;)\n    model_ft = model_ft.to(device)\n\n    criterion = nn.CrossEntropyLoss()\n\n    # Observe that all parameters are being optimized\n    optimizer_ft = optim.SGD(model_ft.parameters(),\n                             lr=learning_rate, momentum=momentum)\n\n    # Decay LR by a factor of 0.1 every 7 epochs\n    exp_lr_scheduler = lr_scheduler.StepLR(\n        optimizer_ft, step_size=7, gamma=0.1)\n\n    model = train_model(model_ft, criterion, optimizer_ft,\n                        exp_lr_scheduler, num_epochs, data_dir)\n\n    return model\n\n\ndef download_data():\n    &quot;&quot;&quot;Download and extract the training data.&quot;&quot;&quot;\n    import urllib\n    from zipfile import ZipFile\n    # download data\n    data_file = &apos;./hymenoptera_data.zip&apos;\n    download_url = &apos;https://download.pytorch.org/tutorial/hymenoptera_data.zip&apos;\n    urllib.request.urlretrieve(download_url, filename=data_file)\n\n    # extract files\n    with ZipFile(data_file, &apos;r&apos;) as zip:\n        print(&apos;extracting files...&apos;)\n        zip.extractall()\n        print(&apos;finished extracting&apos;)\n        data_dir = zip.namelist()[0]\n\n    # delete zip file\n    os.remove(data_file)\n    return data_dir\n\n\ndef main():\n    print(&quot;Torch version:&quot;, torch.__version__)\n\n    # get command-line arguments\n    parser = argparse.ArgumentParser()\n    parser.add_argument(&apos;--num_epochs&apos;, type=int, default=25,\n                        help=&apos;number of epochs to train&apos;)\n    parser.add_argument(&apos;--output_dir&apos;, type=str, help=&apos;output directory&apos;)\n    parser.add_argument(&apos;--learning_rate&apos;, type=float,\n                        default=0.001, help=&apos;learning rate&apos;)\n    parser.add_argument(&apos;--momentum&apos;, type=float, default=0.9, help=&apos;momentum&apos;)\n    args = parser.parse_args()\n\n    data_dir = download_data()\n    print(&quot;data directory is: &quot; + data_dir)\n    model = fine_tune_model(args.num_epochs, data_dir,\n                            args.learning_rate, args.momentum)\n    os.makedirs(args.output_dir, exist_ok=True)\n    torch.save(model, os.path.join(args.output_dir, &apos;model.pt&apos;))\n\n\nif __name__ == &quot;__main__&quot;:\n    main()\n\n</div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[]},"errorSummary":"<span class=\"ansired\">NameError</span>: name &apos;urllib&apos; is not defined","error":"<div class=\"ansiout\"><span class=\"ansired\">---------------------------------------------------------------------------</span>\n<span class=\"ansired\">NameError</span>                                 Traceback (most recent call last)\n<span class=\"ansigreen\">&lt;command-797372779939957&gt;</span> in <span class=\"ansicyan\">&lt;module&gt;</span><span class=\"ansiblue\">()</span>\n<span class=\"ansigreen\">      1</span> training_script <span class=\"ansiyellow\">=</span> <span class=\"ansiblue\">&apos;pytorch_train.py&apos;</span><span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">      2</span> container <span class=\"ansiyellow\">=</span> <span class=\"ansiblue\">&apos;https://sethmottstore.blob.core.windows.net/databricks/&apos;</span><span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">----&gt; 3</span><span class=\"ansiyellow\"> </span>urllib<span class=\"ansiyellow\">.</span>request<span class=\"ansiyellow\">.</span>urlretrieve<span class=\"ansiyellow\">(</span>container <span class=\"ansiyellow\">+</span> training_script<span class=\"ansiyellow\">,</span> filename<span class=\"ansiyellow\">=</span>os<span class=\"ansiyellow\">.</span>path<span class=\"ansiyellow\">.</span>join<span class=\"ansiyellow\">(</span>project_folder<span class=\"ansiyellow\">,</span> training_script<span class=\"ansiyellow\">)</span><span class=\"ansiyellow\">)</span><span class=\"ansiyellow\"></span>\n\n<span class=\"ansired\">NameError</span>: name &apos;urllib&apos; is not defined</div>","workflows":[],"startTime":1546657399202,"submitTime":1546657399194,"finishTime":1546657399398,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"wopauli@microsoft.com","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"b8a9c1a4-2929-4bb6-b61f-95b2fc768e8f"},{"version":"CommandV1","origId":4078960254879106,"guid":"82f7d8cf-a610-452b-8827-72be2e6fe2af","subtype":"command","commandType":"auto","position":15.0,"command":"%md ### Download training data\nThe dataset we will use (located [here](https://download.pytorch.org/tutorial/hymenoptera_data.zip) as a zip file) consists of about 120 training images each for ants and bees, with 75 validation images for each class. [Hymenoptera](https://en.wikipedia.org/wiki/Hymenoptera) is the order of insects that includes ants and bees. We will download and extract the dataset as part of our training script `pytorch_train.py`","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"966f024d-6b63-4af4-a90d-d6a1c0447f21"},{"version":"CommandV1","origId":4078960254879107,"guid":"e1dca506-fae6-44d8-ac7d-7f67bb3a413a","subtype":"command","commandType":"auto","position":16.0,"command":"%md ### Prepare training script\nNow you will need to create your training script. In this tutorial, the training script is already provided for you at `pytorch_train.py`. In practice, you should be able to take any custom training script as is and run it with Azure ML without having to modify your code.\n\nHowever, if you would like to use Azure ML's [tracking and metrics](https://docs.microsoft.com/azure/machine-learning/service/concept-azure-machine-learning-architecture#metrics) capabilities, you will have to add a small amount of Azure ML code inside your training script. \n\nIn `pytorch_train.py`, we will log some metrics to our Azure ML run. To do so, we will access the Azure ML `Run` object within the script:\n```Python\nfrom azureml.core.run import Run\nrun = Run.get_context()\n```\nFurther within `pytorch_train.py`, we log the learning rate and momentum parameters, and the best validation accuracy the model achieves:\n```Python\nrun.log('lr', np.float(learning_rate))\nrun.log('momentum', np.float(momentum))\n\nrun.log('best_val_acc', np.float(best_acc))\n```\nThese run metrics will become particularly important when we begin hyperparameter tuning our model in the \"Tune model hyperparameters\" section.","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"cf248673-bd7b-4f60-9ef0-260d76561363"},{"version":"CommandV1","origId":4078960254879108,"guid":"7c271061-ba65-424f-a76c-80a383617a06","subtype":"command","commandType":"auto","position":17.0,"command":"%md Once your script is ready, copy the training script `pytorch_train.py` into your project directory.","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"84bebc20-4892-49e1-8963-811d87408399"},{"version":"CommandV1","origId":4078960254879109,"guid":"b3232042-1b94-4f75-b14e-31b5d05173bd","subtype":"command","commandType":"auto","position":19.0,"command":"%md ### Create an experiment\nCreate an [Experiment](https://docs.microsoft.com/azure/machine-learning/service/concept-azure-machine-learning-architecture#experiment) to track all the runs in your workspace for this transfer learning PyTorch tutorial. ","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"47a2b5b6-bd3f-41bf-92d5-ba3fe8eaaa3c"},{"version":"CommandV1","origId":4078960254879110,"guid":"7273997a-15ad-486a-af5f-5e047d391025","subtype":"command","commandType":"auto","position":20.0,"command":"from azureml.core import Experiment\n\nexperiment_name = 'pytorch-hymenoptera'\nexperiment = Experiment(ws, name=experiment_name)","commandVersion":1,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\"></div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[]},"errorSummary":null,"error":null,"workflows":[],"startTime":1546657457535,"submitTime":1546657457509,"finishTime":1546657457558,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"wopauli@microsoft.com","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"1efef963-cba4-41cc-9fb7-6af3956a70bb"},{"version":"CommandV1","origId":4078960254879111,"guid":"c359b24c-4fe5-4654-902a-daee38db6236","subtype":"command","commandType":"auto","position":21.0,"command":"%md ### Create a PyTorch estimator\nThe Azure ML SDK's PyTorch estimator enables you to easily submit PyTorch training jobs for both single-node and distributed runs. For more information on the PyTorch estimator, refer [here](https://docs.microsoft.com/azure/machine-learning/service/how-to-train-pytorch). The following code will define a single-node PyTorch job.","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"21843257-aa5b-4ce3-8e0f-b5ab2ce606bf"},{"version":"CommandV1","origId":4078960254879112,"guid":"36458c83-579f-4368-9cbd-d051cc1199eb","subtype":"command","commandType":"auto","position":22.0,"command":"from azureml.train.dnn import PyTorch\n\nscript_params = {\n    '--num_epochs': 30,\n    '--output_dir': './outputs'\n}\n\nestimator = PyTorch(source_directory=project_folder, \n                    script_params=script_params,\n                    compute_target=compute_target,\n                    entry_script='pytorch_train.py',\n                    use_gpu=True)","commandVersion":1,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\"></div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[]},"errorSummary":null,"error":null,"workflows":[],"startTime":1546657464800,"submitTime":1546657464778,"finishTime":1546657464852,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"wopauli@microsoft.com","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"70aea7fd-e8ee-4b6e-9e5c-6ff903dd3cf1"},{"version":"CommandV1","origId":4078960254879113,"guid":"7b4d1e4d-17de-469c-b809-d03e75ce21f3","subtype":"command","commandType":"auto","position":23.0,"command":"%md The `script_params` parameter is a dictionary containing the command-line arguments to your training script `entry_script`. Please note the following:\n- We passed our training data reference `ds_data` to our script's `--data_dir` argument. This will 1) mount our datastore on the remote compute and 2) provide the path to the training data `hymenoptera_data` on our datastore.\n- We specified the output directory as `./outputs`. The `outputs` directory is specially treated by Azure ML in that all the content in this directory gets uploaded to your workspace as part of your run history. The files written to this directory are therefore accessible even once your remote run is over. In this tutorial, we will save our trained model to this output directory.\n\nTo leverage the Azure VM's GPU for training, we set `use_gpu=True`.","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"0f497616-76cf-4ea3-80ce-3f05e298b4b9"},{"version":"CommandV1","origId":4078960254879114,"guid":"d78dc1aa-a3ec-4702-83e4-2d87c3ff5b3f","subtype":"command","commandType":"auto","position":24.0,"command":"%md ### Submit job\nRun your experiment by submitting your estimator object. Note that this call is asynchronous.","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"583f4731-e044-4ba0-8596-ed18729809cf"},{"version":"CommandV1","origId":4078960254879115,"guid":"caae72a8-2e2a-49e9-aaf6-db69bdbe69e4","subtype":"command","commandType":"auto","position":25.0,"command":"run = experiment.submit(estimator)\nprint(run)","commandVersion":1,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\">Run(Experiment: pytorch-hymenoptera,\nId: pytorch-hymenoptera_1546657473431,\nType: azureml.scriptrun,\nStatus: Queued)\n</div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[]},"errorSummary":null,"error":null,"workflows":[],"startTime":1546657468148,"submitTime":1546657468126,"finishTime":1546657481848,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"wopauli@microsoft.com","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"7e949266-96d6-4841-87c7-12f87c4f327f"},{"version":"CommandV1","origId":4078960254879116,"guid":"3bfc1e04-58ad-444e-9b19-c652b7220a31","subtype":"command","commandType":"auto","position":26.0,"command":"# to get more details of your run\nprint(run.get_details())","commandVersion":1,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\">{&apos;target&apos;: &apos;aml-compute&apos;, &apos;status&apos;: &apos;Queued&apos;, &apos;properties&apos;: {&apos;azureml.runsource&apos;: &apos;experiment&apos;, &apos;ContentSnapshotId&apos;: &apos;c5eeebe4-9a1b-4895-bb4b-1c3d1301c3f0&apos;}, &apos;runDefinition&apos;: {&apos;JobName&apos;: None, &apos;Arguments&apos;: [&apos;--num_epochs&apos;, &apos;30&apos;, &apos;--output_dir&apos;, &apos;./outputs&apos;], &apos;Environment&apos;: {&apos;EnvironmentVariables&apos;: {&apos;EXAMPLE_ENV_VAR&apos;: &apos;EXAMPLE_VALUE&apos;, &apos;NCCL_SOCKET_IFNAME&apos;: &apos;^docker0&apos;}, &apos;Docker&apos;: {&apos;BaseImage&apos;: &apos;mcr.microsoft.com/azureml/base-gpu:0.2.0&apos;, &apos;BaseImageRegistry&apos;: {&apos;Password&apos;: None, &apos;Address&apos;: None, &apos;Username&apos;: None}, &apos;Preparation&apos;: None, &apos;Enabled&apos;: True, &apos;SharedVolumes&apos;: True, &apos;Arguments&apos;: [], &apos;GpuSupport&apos;: True}, &apos;Spark&apos;: {&apos;PrecachePackages&apos;: True, &apos;Packages&apos;: [{&apos;Artifact&apos;: &apos;mmlspark_2.11&apos;, &apos;Version&apos;: &apos;0.12&apos;, &apos;Group&apos;: &apos;com.microsoft.ml.spark&apos;}], &apos;Repositories&apos;: [&apos;https://mmlspark.azureedge.net/maven&apos;]}, &apos;Python&apos;: {&apos;CondaDependencies&apos;: {&apos;name&apos;: &apos;project_environment&apos;, &apos;dependencies&apos;: [&apos;python=3.6.2&apos;, {&apos;pip&apos;: [&apos;azureml-defaults&apos;, &apos;torch==1.0.0&apos;, &apos;torchvision==0.2.1&apos;]}]}, &apos;CondaDependenciesFile&apos;: None, &apos;InterpreterPath&apos;: &apos;python&apos;, &apos;UserManagedDependencies&apos;: False}}, &apos;SourceDirectoryDataStore&apos;: None, &apos;History&apos;: {&apos;OutputCollection&apos;: True}, &apos;PrepareEnvironment&apos;: None, &apos;DataReferences&apos;: {}, &apos;MaxRunDurationSeconds&apos;: None, &apos;BatchAi&apos;: {&apos;NodeCount&apos;: 0}, &apos;Tensorflow&apos;: {&apos;WorkerCount&apos;: 1, &apos;ParameterServerCount&apos;: 1}, &apos;Target&apos;: &apos;aml-compute&apos;, &apos;Spark&apos;: {&apos;Configuration&apos;: {&apos;spark.app.name&apos;: &apos;Azure ML Experiment&apos;, &apos;spark.yarn.maxAppAttempts&apos;: &apos;1&apos;}}, &apos;Hdi&apos;: {&apos;YarnDeployMode&apos;: 2}, &apos;AutoPrepareEnvironment&apos;: True, &apos;Script&apos;: &apos;pytorch_train.py&apos;, &apos;Framework&apos;: 0, &apos;ContainerInstance&apos;: {&apos;Region&apos;: None, &apos;MemoryGb&apos;: 0, &apos;CpuCores&apos;: 0}, &apos;Communicator&apos;: 0, &apos;ExposedPorts&apos;: None, &apos;Mpi&apos;: {&apos;ProcessCountPerNode&apos;: 1}, &apos;AmlCompute&apos;: {&apos;RetainCluster&apos;: False, &apos;ClusterMaxNodeCount&apos;: 1, &apos;VmPriority&apos;: None, &apos;Name&apos;: None, &apos;VmSize&apos;: None}, &apos;NodeCount&apos;: 1}, &apos;runId&apos;: &apos;pytorch-hymenoptera_1546657473431&apos;, &apos;logFiles&apos;: {}}\n</div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[]},"errorSummary":null,"error":null,"workflows":[],"startTime":1546657504846,"submitTime":1546657504821,"finishTime":1546657505095,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"wopauli@microsoft.com","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"237d5f7f-2b42-4b49-9971-c7def25f583a"},{"version":"CommandV1","origId":4078960254879117,"guid":"d6ec5ffc-8dde-4fb4-b018-c67f9042eba7","subtype":"command","commandType":"auto","position":27.0,"command":"%md ### Monitor your run\n\nTo get the status of your run","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"dbe20bdb-bb74-4ef3-a4f3-34e667356b06"},{"version":"CommandV1","origId":4078960254879118,"guid":"9f6ffcc5-64fa-421a-8ab8-27e630a3fca0","subtype":"command","commandType":"auto","position":28.0,"command":"run.get_portal_url()","commandVersion":1,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\"><span class=\"ansired\">Out[</span><span class=\"ansired\">24</span><span class=\"ansired\">]: </span>&apos;https://mlworkspace.azure.ai/portal/subscriptions/5be49961-ea44-42ec-8021-b728be90d58c/resourceGroups/learnai_ai_airlift/providers/Microsoft.MachineLearningServices/workspaces/myADBworkspace/experiments/pytorch-hymenoptera/runs/pytorch-hymenoptera_1546657473431&apos;\n</div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[]},"errorSummary":"<span class=\"ansired\">Exception</span>: Cannot call display(&lt;class &apos;str&apos;&gt;)","error":"<div class=\"ansiout\"><span class=\"ansired\">---------------------------------------------------------------------------</span>\n<span class=\"ansired\">Exception</span>                                 Traceback (most recent call last)\n<span class=\"ansigreen\">&lt;command-797372779939833&gt;</span> in <span class=\"ansicyan\">&lt;module&gt;</span><span class=\"ansiblue\">()</span>\n<span class=\"ansigreen\">      1</span> <span class=\"ansired\">#help(run)</span><span class=\"ansiyellow\"></span><span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">----&gt; 2</span><span class=\"ansiyellow\"> </span>display<span class=\"ansiyellow\">(</span>run<span class=\"ansiyellow\">.</span>get_portal_url<span class=\"ansiyellow\">(</span><span class=\"ansiyellow\">)</span><span class=\"ansiyellow\">)</span><span class=\"ansiyellow\"></span>\n\n<span class=\"ansigreen\">/local_disk0/tmp/1546655641872-0/PythonShell.py</span> in <span class=\"ansicyan\">display</span><span class=\"ansiblue\">(self, input, *args, **kwargs)</span>\n<span class=\"ansigreen\">    860</span>             input<span class=\"ansiyellow\">.</span>help<span class=\"ansiyellow\">(</span><span class=\"ansiyellow\">)</span> <span class=\"ansired\"># This is going to display the help as a side-effect</span><span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">    861</span>         <span class=\"ansigreen\">else</span><span class=\"ansiyellow\">:</span><span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">--&gt; 862</span><span class=\"ansiyellow\">             </span><span class=\"ansigreen\">raise</span> Exception<span class=\"ansiyellow\">(</span>genericErrorMsg<span class=\"ansiyellow\">)</span><span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">    863</span> <span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">    864</span>     <span class=\"ansigreen\">def</span> displayHTML<span class=\"ansiyellow\">(</span>self<span class=\"ansiyellow\">,</span> html<span class=\"ansiyellow\">)</span><span class=\"ansiyellow\">:</span><span class=\"ansiyellow\"></span>\n\n<span class=\"ansired\">Exception</span>: Cannot call display(&lt;class &apos;str&apos;&gt;)\n Call help(display) for more info.</div>","workflows":[],"startTime":1546657703744,"submitTime":1546657703738,"finishTime":1546657703764,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"wopauli@microsoft.com","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"e5ba318d-4587-4196-89b9-a03c3dadd5c9"},{"version":"CommandV1","origId":4078960254879119,"guid":"c7172bc5-1771-4fd5-b0da-58bc093e4f58","subtype":"command","commandType":"auto","position":29.0,"command":"%md Alternatively, you can block until the script has completed training before running more code.","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"4573eb81-b244-4def-b304-5d669b589496"},{"version":"CommandV1","origId":4078960254879120,"guid":"b5096683-3b7b-4cde-9f53-547e328bd1b0","subtype":"command","commandType":"auto","position":30.0,"command":"# run.wait_for_completion(show_output=True)","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"c990f3aa-27c9-47cd-be23-731da85612f6"}],"dashboards":[],"guid":"ec8633a4-4c97-4ddc-911c-4255fda04a93","globalVars":{},"iPythonMetadata":{"nbformat":4,"IPythonMetadata":{"authors":[{"name":"minxia"}],"kernelspec":{"display_name":"Python 3.6","language":"python","name":"python36"},"language_info":{"mimetype":"text/x-python","name":"python","pygments_lexer":"ipython3","codemirror_mode":{"name":"ipython","version":3},"version":"3.6.6","nbconvert_exporter":"python","file_extension":".py"},"msauthor":"minxia"}},"inputWidgets":{}}