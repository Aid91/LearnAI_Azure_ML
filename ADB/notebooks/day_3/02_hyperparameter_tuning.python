{"version":"NotebookV1","origId":4190353649973551,"name":"02_hyperparameter_tuning","language":"python","commands":[{"version":"CommandV1","origId":4190353649973552,"guid":"6d647c29-7a09-4ff9-9c6a-ce4f39b92297","subtype":"command","commandType":"auto","position":1.0,"command":"%md Copyright (c) Microsoft Corporation. All rights reserved.  \n\nLicensed under the MIT License.","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"36b699a6-3d32-4d9a-9cce-9f766cb003ea"},{"version":"CommandV1","origId":4190353649973553,"guid":"13909fd6-e839-4c2b-91fd-41530623563a","subtype":"command","commandType":"auto","position":2.0,"command":"%md # Hyperparameter Tuning with HyperDrive\n\nIn this tutorial, you will learn how to tune hyperparameters of a deep learning architecture implmented in PyTorch.","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"4bc0eab8-044b-4c87-bb4d-0190487acbf5"},{"version":"CommandV1","origId":4190353649973554,"guid":"3fa497c6-af69-4d41-a30e-77516d3b60ec","subtype":"command","commandType":"auto","position":3.0,"command":"%md ## Prerequisites\n* Go through the [Configuration](https://github.com/Azure/MachineLearningNotebooks/blob/master/configuration.ipynb) notebook to install the Azure Machine Learning Python SDK and create an Azure ML `Workspace`","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"d6002b7d-02ba-48bd-8002-d62e7bc735bd"},{"version":"CommandV1","origId":4190353649973555,"guid":"e699143a-3280-4089-a7ef-1c4621c66b11","subtype":"command","commandType":"auto","position":4.0,"command":"# Check core SDK version number\nimport azureml.core\n\nprint(\"SDK version:\", azureml.core.VERSION)","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"5c0c8641-d5e9-4dec-b76b-798484f2f8bb"},{"version":"CommandV1","origId":4190353649973556,"guid":"10066175-3b01-4429-b2b0-187889212092","subtype":"command","commandType":"auto","position":5.0,"command":"%md ## Diagnostics\nOpt-in diagnostics for better experience, quality, and security of future releases.","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"b084f17b-20f4-44bb-b686-960bd57f9110"},{"version":"CommandV1","origId":4190353649973557,"guid":"f7dae1f5-6458-4a64-90a2-4de754f6b21f","subtype":"command","commandType":"auto","position":6.0,"command":"from azureml.telemetry import set_diagnostics_collection\n\nset_diagnostics_collection(send_diagnostics=True)","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":{"tags":["Diagnostics"]},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"2aaad415-a907-4eaa-ba61-9ffe81158b5c"},{"version":"CommandV1","origId":4190353649973558,"guid":"941ebe29-6bc6-43f4-9c5b-3bb70a1bc3b8","subtype":"command","commandType":"auto","position":7.0,"command":"%md ## Initialize workspace\nInitialize a [Workspace](https://docs.microsoft.com/azure/machine-learning/service/concept-azure-machine-learning-architecture#workspace) object from the existing workspace you created in the Prerequisites step. `Workspace.from_config()` creates a workspace object from the details stored in `config.json`.","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"450ba969-8152-48b9-aaab-174afddfec2c"},{"version":"CommandV1","origId":4190353649973559,"guid":"322c5923-4cf3-44b6-88c9-9fd8e7c53eb2","subtype":"command","commandType":"auto","position":8.0,"command":"from azureml.core.workspace import Workspace\n\nconfig_file='/dbfs/tmp/aml_config/config.json'\nws = Workspace.from_config(config_file)\n\nprint('Workspace name: ' + ws.name, \n      'Azure region: ' + ws.location, \n      'Subscription id: ' + ws.subscription_id, \n      'Resource group: ' + ws.resource_group, sep = '\\n')","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"8f4cdcab-7917-4f89-ac1e-c13476556109"},{"version":"CommandV1","origId":4190353649973560,"guid":"9124bf5d-4b95-45af-82a8-76c196ccea69","subtype":"command","commandType":"auto","position":9.0,"command":"%md ## Create or Attach existing AmlCompute\nYou will need to create a [compute target](https://docs.microsoft.com/azure/machine-learning/service/concept-azure-machine-learning-architecture#compute-target) for training your model. In this tutorial, we use Azure ML managed compute ([AmlCompute](https://docs.microsoft.com/azure/machine-learning/service/how-to-set-up-training-targets#amlcompute)) for our remote training compute resource.\n\n**Creation of AmlCompute takes approximately 5 minutes.** If the AmlCompute with that name is already in your workspace, this code will skip the creation process.\n\nAs with other Azure services, there are limits on certain resources (e.g. AmlCompute) associated with the Azure Machine Learning service. Please read [this article](https://docs.microsoft.com/en-us/azure/machine-learning/service/how-to-manage-quotas) on the default limits and how to request more quota.","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"3903efa0-83b9-4de7-a882-e009240580e0"},{"version":"CommandV1","origId":4190353649973561,"guid":"55711fdc-3f91-484a-a4de-8fa98a8516f8","subtype":"command","commandType":"auto","position":10.0,"command":"from azureml.core.compute import ComputeTarget, AmlCompute\nfrom azureml.core.compute_target import ComputeTargetException\n\n# choose a name for your cluster\ncluster_name = \"gpucluster\"\n\ntry:\n    compute_target = ComputeTarget(workspace=ws, name=cluster_name)\n    print('Found existing compute target.')\nexcept ComputeTargetException:\n    print('Creating a new compute target...')\n    compute_config = AmlCompute.provisioning_configuration(vm_size='STANDARD_NC6', \n                                                           max_nodes=4)\n\n    # create the cluster\n    compute_target = ComputeTarget.create(ws, cluster_name, compute_config)\n\n    compute_target.wait_for_completion(show_output=True)\n\n# use get_status() to get a detailed status for the current cluster. \nprint(compute_target.get_status().serialize())","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"0b8580c3-8e9a-47b0-895f-4732ec96488b"},{"version":"CommandV1","origId":4190353649973562,"guid":"4c5b7d47-8204-47b6-bee7-997776c54cec","subtype":"command","commandType":"auto","position":11.0,"command":"%md The above code creates a GPU cluster. If you instead want to create a CPU cluster, provide a different VM size to the `vm_size` parameter, such as `STANDARD_D2_V2`.","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"3e3c26a0-58c7-4590-b11e-f30e6dfa7f30"},{"version":"CommandV1","origId":4190353649973563,"guid":"11794145-eb13-4315-a947-3e608d3b5076","subtype":"command","commandType":"auto","position":19.0,"command":"%md ### Create an experiment\nCreate an [Experiment](https://docs.microsoft.com/azure/machine-learning/service/concept-azure-machine-learning-architecture#experiment) to track all the runs in your workspace for this transfer learning PyTorch tutorial. ","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"f6338c39-6eb2-462d-8378-49163f3c75db"},{"version":"CommandV1","origId":4190353649973564,"guid":"16239a9a-074f-4b32-9511-14e69388ce0a","subtype":"command","commandType":"auto","position":20.0,"command":"from azureml.core import Experiment\n\nexperiment_name = 'pytorch-hymenoptera'\nexperiment = Experiment(ws, name=experiment_name)","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"c4c0ec4c-d1a5-4016-a4c5-9a7c33481667"},{"version":"CommandV1","origId":4190353649973565,"guid":"13c272f9-e12d-4ac2-b7f8-9d07a51bcc0e","subtype":"command","commandType":"auto","position":21.0,"command":"%md ### Create a PyTorch estimator\nThe Azure ML SDK's PyTorch estimator enables you to easily submit PyTorch training jobs for both single-node and distributed runs. For more information on the PyTorch estimator, refer [here](https://docs.microsoft.com/azure/machine-learning/service/how-to-train-pytorch). The following code will define a single-node PyTorch job.","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"7136d1c2-b768-445e-9a8c-fae5cf715dc5"},{"version":"CommandV1","origId":4190353649973566,"guid":"afb385e6-efc4-4ed1-8bc9-593f83fdb44f","subtype":"command","commandType":"auto","position":22.0,"command":"from azureml.train.dnn import PyTorch\n\nscript_params = {\n    '--num_epochs': 30,\n    '--output_dir': './outputs'\n}\n\nestimator = PyTorch(source_directory=project_folder, \n                    script_params=script_params,\n                    compute_target=compute_target,\n                    entry_script='pytorch_train.py',\n                    use_gpu=True)","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"afb1f9d9-294f-4a50-a334-50341328b5bf"},{"version":"CommandV1","origId":4190353649973567,"guid":"899737e3-53c2-4739-b2b8-a3cfbf8e0d2f","subtype":"command","commandType":"auto","position":23.0,"command":"%md The `script_params` parameter is a dictionary containing the command-line arguments to your training script `entry_script`. Please note the following:\n- We passed our training data reference `ds_data` to our script's `--data_dir` argument. This will 1) mount our datastore on the remote compute and 2) provide the path to the training data `hymenoptera_data` on our datastore.\n- We specified the output directory as `./outputs`. The `outputs` directory is specially treated by Azure ML in that all the content in this directory gets uploaded to your workspace as part of your run history. The files written to this directory are therefore accessible even once your remote run is over. In this tutorial, we will save our trained model to this output directory.\n\nTo leverage the Azure VM's GPU for training, we set `use_gpu=True`.","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"65969321-31ee-4f3d-903b-10e95581d0ff"},{"version":"CommandV1","origId":4190353649973568,"guid":"976b701c-9a7c-4be4-80cd-ae83eb5f8a32","subtype":"command","commandType":"auto","position":31.0,"command":"%md ## Tune model hyperparameters\nNow that we've seen how to do a simple PyTorch training run using the SDK, let's see if we can further improve the accuracy of our model. We can optimize our model's hyperparameters using Azure Machine Learning's hyperparameter tuning capabilities.","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"14091ddd-8647-4b0a-a600-8fcfabf06cc8"},{"version":"CommandV1","origId":4190353649973569,"guid":"4c826d16-480c-4c6c-82a7-0e990e4d01d3","subtype":"command","commandType":"auto","position":32.0,"command":"%md ### Start a hyperparameter sweep\nFirst, we will define the hyperparameter space to sweep over. Since our training script uses a learning rate schedule to decay the learning rate every several epochs, let's tune the initial learning rate and the momentum parameters. In this example we will use random sampling to try different configuration sets of hyperparameters to maximize our primary metric, the best validation accuracy (`best_val_acc`).\n\nThen, we specify the early termination policy to use to early terminate poorly performing runs. Here we use the `BanditPolicy`, which will terminate any run that doesn't fall within the slack factor of our primary evaluation metric. In this tutorial, we will apply this policy every epoch (since we report our `best_val_acc` metric every epoch and `evaluation_interval=1`). Notice we will delay the first policy evaluation until after the first `10` epochs (`delay_evaluation=10`).\nRefer [here](https://docs.microsoft.com/azure/machine-learning/service/how-to-tune-hyperparameters#specify-an-early-termination-policy) for more information on the BanditPolicy and other policies available.","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"0f8cbd39-d48a-42d6-a557-edb5f1476a31"},{"version":"CommandV1","origId":4190353649973570,"guid":"54358979-7d1b-4b7e-af17-cee266ba0f25","subtype":"command","commandType":"auto","position":33.0,"command":"from azureml.train.hyperdrive import *\n\nparam_sampling = RandomParameterSampling( {\n        'learning_rate': uniform(0.0005, 0.005),\n        'momentum': uniform(0.9, 0.99)\n    }\n)\n\nearly_termination_policy = BanditPolicy(slack_factor=0.15, evaluation_interval=1, delay_evaluation=10)\n\nhyperdrive_run_config = HyperDriveRunConfig(estimator=estimator,\n                                            hyperparameter_sampling=param_sampling, \n                                            policy=early_termination_policy,\n                                            primary_metric_name='best_val_acc',\n                                            primary_metric_goal=PrimaryMetricGoal.MAXIMIZE,\n                                            max_total_runs=8,\n                                            max_concurrent_runs=4)","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"17edfe13-1f03-4238-9676-9180766fab3d"},{"version":"CommandV1","origId":4190353649973571,"guid":"98817f5e-8ef1-4b9f-80ce-b182ff9f65da","subtype":"command","commandType":"auto","position":34.0,"command":"%md Finally, lauch the hyperparameter tuning job.","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"f3c60f71-17ba-4024-8ec3-a96e8ac6c222"},{"version":"CommandV1","origId":4190353649973572,"guid":"268cd1c6-03d7-48c9-a1a9-df667e70cab3","subtype":"command","commandType":"auto","position":35.0,"command":"# start the HyperDrive run\nhyperdrive_run = experiment.submit(hyperdrive_run_config)","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"147641c7-b5aa-40d0-81ee-938219fa5530"},{"version":"CommandV1","origId":4190353649973573,"guid":"a4b15d36-097a-47f3-b61c-f14d706e3b81","subtype":"command","commandType":"auto","position":36.0,"command":"%md ### Monitor HyperDrive runs\nYou can monitor the progress of the runs with the following Jupyter widget. ","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"f7c78651-d249-434e-b70b-16c629f70a2c"},{"version":"CommandV1","origId":4190353649973574,"guid":"74591f6c-dec1-4bcc-b893-0367afde5ea3","subtype":"command","commandType":"auto","position":37.0,"command":"run.get_portal_url()","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"bd056412-bf1e-4b4d-b0ee-03040311187c"},{"version":"CommandV1","origId":4190353649973575,"guid":"e985d132-ffee-46c8-b155-c0a1be500156","subtype":"command","commandType":"auto","position":38.0,"command":"%md Or block until the HyperDrive sweep has completed:","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"68b23573-b8d2-427e-823d-a29bd9e3d188"},{"version":"CommandV1","origId":4190353649973576,"guid":"aa025205-33aa-4c1e-8410-df6034230988","subtype":"command","commandType":"auto","position":39.0,"command":"# hyperdrive_run.wait_for_completion(show_output=True)","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"71c2c1dc-8dd6-43a0-ad1b-d905019d793c"},{"version":"CommandV1","origId":4190353649973577,"guid":"ff0a5c25-c941-497d-a38f-f27b59459a5c","subtype":"command","commandType":"auto","position":40.0,"command":"%md ### Find and register the best model\nOnce all the runs complete, we can find the run that produced the model with the highest accuracy.","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"91ad33ad-4ae9-4a94-8597-b5d1b73294ff"},{"version":"CommandV1","origId":4190353649973578,"guid":"88899034-8539-4b81-9bb0-bd0a2ce7fb0d","subtype":"command","commandType":"auto","position":41.0,"command":"best_run = hyperdrive_run.get_best_run_by_primary_metric()\nbest_run_metrics = best_run.get_metrics()\nprint(best_run)","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"016fa7ec-45b7-48d9-bebb-8576a0348991"},{"version":"CommandV1","origId":4190353649973579,"guid":"4155540c-cae6-4901-9319-55219b61a128","subtype":"command","commandType":"auto","position":42.0,"command":"print('Best Run is:\\n  Validation accuracy: {0:.5f} \\n  Learning rate: {1:.5f} \\n  Momentum: {2:.5f}'.format(\n        best_run_metrics['best_val_acc'][-1],\n        best_run_metrics['lr'],\n        best_run_metrics['momentum'])\n     )","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"ebc3d6ce-ad01-4a81-8e61-74bd5e2f2295"},{"version":"CommandV1","origId":4190353649973580,"guid":"a957c741-c7b0-4a92-87a2-15bb8ec5e896","subtype":"command","commandType":"auto","position":43.0,"command":"%md Finally, register the model from your best-performing run to your workspace. The `model_path` parameter takes in the relative path on the remote VM to the model file in your `outputs` directory. In the next section, we will deploy this registered model as a web service.","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"1d88b667-9051-4e88-9660-9fa7bf0bef40"},{"version":"CommandV1","origId":4190353649973581,"guid":"1623dfe8-8a43-49ec-b325-00fbcd8a440e","subtype":"command","commandType":"auto","position":44.0,"command":"model = best_run.register_model(model_name = 'pytorch-hymenoptera', model_path = 'outputs/model.pt')\nprint(model.name, model.id, model.version, sep = '\\t')","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"28950324-0ae3-4863-975d-a1ea488ee257"},{"version":"CommandV1","origId":4190353649973582,"guid":"d33e5b3b-09af-409d-9e15-5ecbbda35d75","subtype":"command","commandType":"auto","position":45.0,"command":"%md ## Optional: Deploy model as web service\nOnce you have your trained model, you can deploy the model on Azure. In this tutorial, we will deploy the model as a web service in [Azure Container Instances](https://docs.microsoft.com/en-us/azure/container-instances/) (ACI). For more information on deploying models using Azure ML, refer [here](https://docs.microsoft.com/azure/machine-learning/service/how-to-deploy-and-where).","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"98685b8a-8ebe-478e-8210-d329b1a17a91"},{"version":"CommandV1","origId":4190353649973583,"guid":"714352ea-ae37-41f3-9b6a-5690a5dc4a67","subtype":"command","commandType":"auto","position":46.0,"command":"%md ### Create scoring script\n\nFirst, we will create a scoring script that will be invoked by the web service call. Note that the scoring script must have two required functions:\n* `init()`: In this function, you typically load the model into a `global` object. This function is executed only once when the Docker container is started. \n* `run(input_data)`: In this function, the model is used to predict a value based on the input data. The input and output typically use JSON as serialization and deserialization format, but you are not limited to that.\n\nRefer to the scoring script `pytorch_score.py` for this tutorial. Our web service will use this file to predict whether an image is an ant or a bee. When writing your own scoring script, don't forget to test it locally first before you go and deploy the web service.","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"77e3f5ea-4f74-4bc8-809b-340ff4ab3ac8"},{"version":"CommandV1","origId":4190353649973584,"guid":"43413cf7-e466-402d-a482-d81d0513993e","subtype":"command","commandType":"auto","position":47.0,"command":"%md ### Create environment file\nThen, we will need to create an environment file (`myenv.yml`) that specifies all of the scoring script's package dependencies. This file is used to ensure that all of those dependencies are installed in the Docker image by Azure ML. In this case, we need to specify `azureml-core`, `torch` and `torchvision`.","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"d04d7a82-24fc-4426-8b8f-f3bfaff6d972"},{"version":"CommandV1","origId":4190353649973585,"guid":"e735e793-08e2-4715-bb4f-c7ae7bede3cc","subtype":"command","commandType":"auto","position":48.0,"command":"from azureml.core.conda_dependencies import CondaDependencies \n\nmyenv = CondaDependencies.create(pip_packages=['azureml-defaults', 'torch', 'torchvision'])\n\nwith open(\"myenv.yml\",\"w\") as f:\n    f.write(myenv.serialize_to_string())\n    \nprint(myenv.serialize_to_string())","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"058978a5-740c-4ebb-b43b-7a5e73422d7a"},{"version":"CommandV1","origId":4190353649973586,"guid":"11b3c5d1-829a-4f4e-9cc8-ad6dcdc068c6","subtype":"command","commandType":"auto","position":49.0,"command":"%md ### Configure the container image\nNow configure the Docker image that you will use to build your ACI container.","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"78b2831d-8b56-48cf-b524-b1b59e4fa851"},{"version":"CommandV1","origId":4190353649973587,"guid":"edc86391-be24-456b-bfbf-ef1f7999dc09","subtype":"command","commandType":"auto","position":50.0,"command":"from azureml.core.image import ContainerImage\n\nimage_config = ContainerImage.image_configuration(execution_script='pytorch_score.py', \n                                                  runtime='python', \n                                                  conda_file='myenv.yml',\n                                                  description='Image with hymenoptera model')","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"5e5b0538-f16d-4d86-9f6e-3999af51fff4"},{"version":"CommandV1","origId":4190353649973588,"guid":"eb18a058-da1e-4b77-9b24-0fe4961057fb","subtype":"command","commandType":"auto","position":51.0,"command":"%md ### Configure the ACI container\nWe are almost ready to deploy. Create a deployment configuration file to specify the number of CPUs and gigabytes of RAM needed for your ACI container. While it depends on your model, the default of `1` core and `1` gigabyte of RAM is usually sufficient for many models.","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"a1f9c203-b5e4-46c0-82f6-546dcfe6c443"},{"version":"CommandV1","origId":4190353649973589,"guid":"353f4ee5-be3d-49da-bcaf-20c695970f77","subtype":"command","commandType":"auto","position":52.0,"command":"from azureml.core.webservice import AciWebservice\n\naciconfig = AciWebservice.deploy_configuration(cpu_cores=1, \n                                               memory_gb=1, \n                                               tags={'data': 'hymenoptera',  'method':'transfer learning', 'framework':'pytorch'},\n                                               description='Classify ants/bees using transfer learning with PyTorch')","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"f795fb6c-c64c-4c97-80a7-8a1b8cb1100c"},{"version":"CommandV1","origId":4190353649973590,"guid":"1b4f2ecb-5edd-4946-8bb6-50e8414fee4e","subtype":"command","commandType":"auto","position":53.0,"command":"%md ### Deploy the registered model\nFinally, let's deploy a web service from our registered model. Deploy the web service using the ACI config and image config files created in the previous steps. We pass the `model` object in a list to the `models` parameter. If you would like to deploy more than one registered model, append the additional models to this list.","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"357eee41-0977-4aa7-9be8-2d74a17284c7"},{"version":"CommandV1","origId":4190353649973591,"guid":"4e627c52-7010-4f2b-89a8-2fcc22818def","subtype":"command","commandType":"auto","position":54.0,"command":"%%time\nfrom azureml.core.webservice import Webservice\n\nservice_name = 'aci-hymenoptera'\nservice = Webservice.deploy_from_model(workspace=ws,\n                                       name=service_name,\n                                       models=[model],\n                                       image_config=image_config,\n                                       deployment_config=aciconfig,)\n\nservice.wait_for_deployment(show_output=True)\nprint(service.state)","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"e331cee0-e717-4813-bde6-709a6e4dd2a6"},{"version":"CommandV1","origId":4190353649973592,"guid":"d7dcaddf-524d-47ae-b1b3-d0b9aa73ab60","subtype":"command","commandType":"auto","position":55.0,"command":"%md If your deployment fails for any reason and you need to redeploy, make sure to delete the service before you do so: `service.delete()`","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"088f42d2-d81f-4227-abfb-73b9da7edf11"},{"version":"CommandV1","origId":4190353649973593,"guid":"7a65da78-9df2-4fb0-8aef-a0571e45dd6b","subtype":"command","commandType":"auto","position":56.0,"command":"%md **Tip: If something goes wrong with the deployment, the first thing to look at is the logs from the service by running the following command:**","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"10a31064-2bbd-4615-ae47-48ac68402f24"},{"version":"CommandV1","origId":4190353649973594,"guid":"83a6f32f-d332-47de-89c0-64c77160d92f","subtype":"command","commandType":"auto","position":57.0,"command":"service.get_logs()","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"700eae7a-6563-4b1c-8ea4-5cfb5e7cc572"},{"version":"CommandV1","origId":4190353649973595,"guid":"7f5f7bae-1e95-4522-8304-3e64ec4a5857","subtype":"command","commandType":"auto","position":58.0,"command":"%md Get the web service's HTTP endpoint, which accepts REST client calls. This endpoint can be shared with anyone who wants to test the web service or integrate it into an application.","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"226a564b-0380-420a-9e3e-841512eb5123"},{"version":"CommandV1","origId":4190353649973596,"guid":"1cfed8cf-f0f0-4d56-8ac6-9195d669c638","subtype":"command","commandType":"auto","position":59.0,"command":"print(service.scoring_uri)","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"0c36ed20-c246-43c3-93f2-292645c1ccbf"},{"version":"CommandV1","origId":4190353649973597,"guid":"89b2298d-2ab1-4be0-a7c3-0fbd675a033f","subtype":"command","commandType":"auto","position":60.0,"command":"%md ### Test the web service\nFinally, let's test our deployed web service. We will send the data as a JSON string to the web service hosted in ACI and use the SDK's `run` API to invoke the service. Here we will take an image from our validation data to predict on.","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"e972742b-ec3d-44b9-b8ef-f73b8d881120"},{"version":"CommandV1","origId":4190353649973598,"guid":"d0fa9e2c-a9d1-4ee6-85e0-fe65193b763a","subtype":"command","commandType":"auto","position":61.0,"command":"import os, json\nfrom PIL import Image\nimport matplotlib.pyplot as plt\n\nplt.imshow(Image.open('test_img.jpg'))","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"1211c491-35d1-428e-859d-a4ff6a2ae2b3"},{"version":"CommandV1","origId":4190353649973599,"guid":"a46d4dd3-038a-474c-9820-a984cb2951c4","subtype":"command","commandType":"auto","position":62.0,"command":"import torch\nfrom torchvision import transforms\n    \ndef preprocess(image_file):\n    \"\"\"Preprocess the input image.\"\"\"\n    data_transforms = transforms.Compose([\n        transforms.Resize(256),\n        transforms.CenterCrop(224),\n        transforms.ToTensor(),\n        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])\n    ])\n\n    image = Image.open(image_file)\n    image = data_transforms(image).float()\n    image = torch.tensor(image)\n    image = image.unsqueeze(0)\n    return image.numpy()","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"99939815-81b9-490b-b9f3-b8cf0a45d975"},{"version":"CommandV1","origId":4190353649973600,"guid":"49578537-d62a-42d8-9b0a-fa68af7cfb61","subtype":"command","commandType":"auto","position":63.0,"command":"input_data = preprocess('test_img.jpg')\nresult = service.run(input_data=json.dumps({'data': input_data.tolist()}))\nprint(result)","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"25629571-9351-4a5d-8eb8-006c79dcac6a"},{"version":"CommandV1","origId":4190353649973601,"guid":"0901883d-01f2-41d4-9d18-f2edd627b531","subtype":"command","commandType":"auto","position":64.0,"command":"%md ## Clean up\nOnce you no longer need the web service, you can delete it with a simple API call.","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"0c337818-ff40-42a1-87d3-caf088e59a6b"},{"version":"CommandV1","origId":4190353649973602,"guid":"762fd8c0-0d13-4955-93e2-da396a8aff00","subtype":"command","commandType":"auto","position":65.0,"command":"service.delete()","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"5858075836730959","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"486800d8-981b-4e12-98cf-8d7250e7bf23"}],"dashboards":[],"guid":"f3334569-feac-43dd-af76-0ffe25d4f2ed","globalVars":{},"iPythonMetadata":{"nbformat":4,"IPythonMetadata":{"authors":[{"name":"minxia"}],"kernelspec":{"display_name":"Python 3.6","language":"python","name":"python36"},"language_info":{"mimetype":"text/x-python","name":"python","pygments_lexer":"ipython3","codemirror_mode":{"name":"ipython","version":3},"version":"3.6.6","nbconvert_exporter":"python","file_extension":".py"},"msauthor":"minxia"}},"inputWidgets":{}}